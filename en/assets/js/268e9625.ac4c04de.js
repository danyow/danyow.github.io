"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52101],{35318:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(27378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=a,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return t?i.createElement(g,r(r({ref:n},p),{},{components:t})):i.createElement(g,r({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<o;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3770:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return p}});t(27378);var i=t(35318);function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},a.apply(this,arguments)}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const r={id:"Android symbols",slug:"/platform-specific/android/android-developing/android-testing-and-debugging/android-symbols"},l="Android symbols",s={unversionedId:"unity/platform-specific/android/android-developing/android-testing-and-debugging/Android symbols",id:"version-Unity@2022.1/unity/platform-specific/android/android-developing/android-testing-and-debugging/Android symbols",title:"Android symbols",description:"To help you debug your application, Unity can generate a package that contains symbol files for native Unity libraries. Symbol files contain a table that translates active memory addresses into information you can use, like a method name. The translation process is called symbolication. You can upload a symbols package to the Google Play Console to see a human-readable stack trace on the Android Vitals dashboard.",source:"@site/versioned_docs/version-Unity@2022.1/unity/platform-specific/android/android-developing/android-testing-and-debugging/android-symbols.md",sourceDirName:"unity/platform-specific/android/android-developing/android-testing-and-debugging",slug:"/platform-specific/android/android-developing/android-testing-and-debugging/android-symbols",permalink:"/en/docs/platform-specific/android/android-developing/android-testing-and-debugging/android-symbols",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/docs/unity/platform-specific/android/android-developing/android-testing-and-debugging/android-symbols.md",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"3/31/2022",frontMatter:{id:"Android symbols",slug:"/platform-specific/android/android-developing/android-testing-and-debugging/android-symbols"},sidebar:"unity",previous:{title:"Debugging on an Android device",permalink:"/en/docs/platform-specific/android/android-developing/android-testing-and-debugging/android-debugging-on-an-android-device"},next:{title:"Unity Remote",permalink:"/en/docs/platform-specific/android/android-developing/android-testing-and-debugging/unity-remote5"}},d={},p=[{value:"Public symbols",id:"public-symbols",level:2},{value:"Debugging symbols",id:"debugging-symbols",level:2},{value:"Generating a symbols package",id:"generating-a-symbols-package",level:2},{value:"Using symbols in the Google Play console",id:"using-symbols-in-the-google-play-console",level:2}],u={toc:p};function c(e){var{components:n}=e,t=o(e,["components"]);return(0,i.kt)("wrapper",a({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",a({},{id:"android-symbols"}),"Android symbols"),(0,i.kt)("p",null,"To help you debug your application, Unity can generate a package that contains symbol files for native Unity libraries. Symbol files contain a table that translates active memory addresses into information you can use, like a method name. The translation process is called symbolication. You can upload a symbols package to the Google Play Console to see a human-readable stack trace on the ",(0,i.kt)("a",a({parentName:"p"},{href:"https://developer.android.com/topic/performance/vitals"}),"Android Vitals")," dashboard."),(0,i.kt)("p",null,"There are two types of symbol files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Public: A small file that contains a symbol table. For more information, see ",(0,i.kt)("a",a({parentName:"li"},{href:"#public-symbols"}),"Public symbols"),"."),(0,i.kt)("li",{parentName:"ul"},"Debug: Contains everything that a public symbol file contains, and full debugging information that you can use for more in-depth debugging. For more information, see ",(0,i.kt)("a",a({parentName:"li"},{href:"#debugging-symbols"}),"Debugging symbols"),".")),(0,i.kt)("p",null,"You can generate symbol files for the following libraries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"libmain"),": Responsible for initial Unity engine loading logic."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"libunity"),": Unity\u2019s engine code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"libil2cpp"),": Contains C# scripts from the project converted to C++ code.")),(0,i.kt)("p",null,"Unity generates the ",(0,i.kt)("inlineCode",{parentName:"p"},"libmain")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libunity")," symbol files. ",(0,i.kt)("a",a({parentName:"p"},{href:"/en/docs/platform-specific/android/android-introducing/android-gradle-overview"}),"Gradle")," generates the ",(0,i.kt)("inlineCode",{parentName:"p"},"libil2cpp")," symbol file."),(0,i.kt)("h2",a({},{id:"public-symbols"}),"Public symbols"),(0,i.kt)("p",null,"A public symbol file contains information that resolves function addresses to human-readable strings. Unity uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"--strip-debug")," parameter to create public symbols that remove more in-depth debug information. This makes public symbol files and packages smaller than ",(0,i.kt)("a",a({parentName:"p"},{href:"#debugging-symbols"}),"debugging symbol")," files and packages."),(0,i.kt)("h2",a({},{id:"debugging-symbols"}),"Debugging symbols"),(0,i.kt)("p",null,"A debugging symbol file contains full debugging information and a symbol table. Use it to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Resolve stack traces and to debug applications that you have source code available for."),(0,i.kt)("li",{parentName:"ul"},"Attach a native debugger to the application and debug the code.")),(0,i.kt)("p",null,"Unity uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"--only-keep-debug")," parameter to create debugging symbols. For more information, see ",(0,i.kt)("a",a({parentName:"p"},{href:"https://man7.org/linux/man-pages/man1/objcopy.1.html"}),"\u2013only-keep-debug")," in the Linux user manual."),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Note:"),"  If debugging symbols aren\u2019t available, Unity places a ",(0,i.kt)("a",a({parentName:"p"},{href:"#public-symbols"}),"public symbol")," file in your project at build time. For the ",(0,i.kt)("inlineCode",{parentName:"p"},"libmain")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libunity")," libraries, debugging symbols are not available and Unity always generates public symbol files."),(0,i.kt)("h2",a({},{id:"generating-a-symbols-package"}),"Generating a symbols package"),(0,i.kt)("p",null,"There are two ways to enable symbols package generation for your application:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In the Build Settings window:"),(0,i.kt)("li",{parentName:"ul"},"Open the Build Settings window (menu:  ",(0,i.kt)("strong",{parentName:"li"},"File"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Build Settings")," )."),(0,i.kt)("li",{parentName:"ul"},"Select the Android platform."),(0,i.kt)("li",{parentName:"ul"},"Set  ",(0,i.kt)("strong",{parentName:"li"},"Create symbols.zip"),"  to one of the following:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",a({parentName:"li"},{href:"#public-symbols"}),"Public")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",a({parentName:"li"},{href:"#debugging-symbols"}),"Debugging")))),(0,i.kt)("li",{parentName:"ul"},"Use the ",(0,i.kt)("a",a({parentName:"li"},{href:"https://docs.unity3d.com/cn/2022.1/Manual/EditorUserBuildSettings-androidCreateSymbols.html"}),"EditorUserBuildSettings.androidCreateSymbols")," API.")),(0,i.kt)("p",null,"After you enable symbols package generation, building your project generates a ",(0,i.kt)("inlineCode",{parentName:"p"},".zip")," file that contains symbol files for the ",(0,i.kt)("inlineCode",{parentName:"p"},"libmain")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libunity")," library. If you set your ",(0,i.kt)("a",a({parentName:"p"},{href:"/en/docs/scripting-section/unity-architecture/scripting-backends/scripting-backends"}),"scripting backend")," to  ",(0,i.kt)("strong",{parentName:"p"},"IL2CPP")," , the ",(0,i.kt)("inlineCode",{parentName:"p"},".zip")," also contains a symbol file for the ",(0,i.kt)("inlineCode",{parentName:"p"},"libil2cpp")," library. Unity places this symbols package within the output directory."),(0,i.kt)("p",null,"If you enable  ",(0,i.kt)("strong",{parentName:"p"},"Export Project"),"  in the Android Build Settings, Unity doesn\u2019t build the project. Instead, it exports the project for Android Studio, generates symbols for ",(0,i.kt)("inlineCode",{parentName:"p"},"libmain")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libunity"),", and places them within ",(0,i.kt)("inlineCode",{parentName:"p"},"unityLibrary/symbols/&lt;architecture&gt;/")," in the output directory. When you build your exported project from Android Studio, Gradle generates the ",(0,i.kt)("inlineCode",{parentName:"p"},"libil2cpp")," symbol file and places it within the ",(0,i.kt)("inlineCode",{parentName:"p"},"unityLibrary/symbols/&lt;architecture&gt;/")," directory alongside the ",(0,i.kt)("inlineCode",{parentName:"p"},"libmain")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libunity")," symbol file."),(0,i.kt)("h2",a({},{id:"using-symbols-in-the-google-play-console"}),"Using symbols in the Google Play console"),(0,i.kt)("p",null,"After you upload your application to Google Play, you can upload a ",(0,i.kt)("a",a({parentName:"p"},{href:"#public-symbols"}),"public symbols")," package for it. For information on how to do this, see Google\u2019s documentation: ",(0,i.kt)("a",a({parentName:"p"},{href:"https://support.google.com/googleplay/android-developer/answer/9848633"}),"Deobfuscate or symbolicate crash stack traces"),"."),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Note:"),"  Google Play doesn\u2019t symbolicate crashes that your application received before you uploaded the symbols package."))}c.isMDXComponent=!0}}]);