"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51396],{35318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,y=c["".concat(u,".").concat(m)]||c[m]||s[m]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2898:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});n(27378);var r=n(35318);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const o={id:"UDP API",slug:"/unity-services/udp/udp-reference/udp-api"},l="UDP API",u={unversionedId:"unity/unity-services/udp/udp-reference/UDP API",id:"version-Unity@2022.1/unity/unity-services/udp/udp-reference/UDP API",title:"UDP API",description:"The UDP API lets you upload binary files to the UDP console. This lets you use a CI system to build your app and push the output directly to UDP. See Managing and publishing your game on the UDP console.",source:"@site/versioned_docs/version-Unity@2022.1/unity/unity-services/udp/udp-reference/udp-api.md",sourceDirName:"unity/unity-services/udp/udp-reference",slug:"/unity-services/udp/udp-reference/udp-api",permalink:"/en/docs/unity-services/udp/udp-reference/udp-api",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/docs/unity/unity-services/udp/udp-reference/udp-api.md",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"3/31/2022",frontMatter:{id:"UDP API",slug:"/unity-services/udp/udp-reference/udp-api"},sidebar:"unity",previous:{title:"UDP \u53c2\u8003",permalink:"/en/docs/unity-services/udp/udp-reference/udp-reference"},next:{title:"UDP SDK data collection",permalink:"/en/docs/unity-services/udp/udp-reference/udp-sdk-data-collection"}},d={},p=[{value:"API structure",id:"api-structure",level:2},{value:"Form keys",id:"form-keys",level:2},{value:"Common error messages and error codes",id:"common-error-messages-and-error-codes",level:2},{value:"Invalid authentication token",id:"invalid-authentication-token",level:3},{value:"Invalid organization ID or client ID",id:"invalid-organization-id-or-client-id",level:3},{value:"Invalid file type",id:"invalid-file-type",level:3},{value:"Invalid OBB type",id:"invalid-obb-type",level:3},{value:"Invalid content type",id:"invalid-content-type",level:3}],s={toc:p};function c(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",a({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",a({},{id:"udp-api"}),"UDP API"),(0,r.kt)("p",null,"The UDP API lets you upload binary files to the UDP console. This lets you use a CI system to build your app and push the output directly to UDP. See ",(0,r.kt)("a",a({parentName:"p"},{href:"/en/docs/unity-services/udp/udp-managing-and-publishing#uploading-your-game-to-the-udp-console-using-the-udp-api"}),"Managing and publishing your game on the UDP console"),"."),(0,r.kt)("p",null,"The following file types are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"APK"),(0,r.kt)("li",{parentName:"ul"},"OBB"),(0,r.kt)("li",{parentName:"ul"},"AAB")),(0,r.kt)("h2",a({},{id:"api-structure"}),"API structure"),(0,r.kt)("p",null,"The API is structured as follows: ",(0,r.kt)("a",a({parentName:"p"},{href:"https://distribute.dashboard.unity.com/developer/api/upload/:orgId/:clientId?token=xxxxxx%5C%5B&obbType=xxxx%5C%5D"}),"https://distribute.dashboard.unity.com/developer/api/upload/:orgId/:clientId?token=xxxxxx\\[&obbType=xxxx\\]")),(0,r.kt)("p",null,"The table below describes the parameters of the API."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",a({parentName:"tr"},{align:null}),"Parameter"),(0,r.kt)("th",a({parentName:"tr"},{align:null}),"\u63cf\u8ff0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",a({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"orgId")),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"The organization ID of the game for which you want to upload binary files.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",a({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"clientId")),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"The client ID of the game for which you want to upload binary files.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",a({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"token")),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"The authorization token generated in the UDP console, on the Developer API page.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",a({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"obbType")),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"The OBB file type you want to upload. The following values are valid:",(0,r.kt)("br",null),"- ",(0,r.kt)("inlineCode",{parentName:"td"},"mainObb"),(0,r.kt)("br",null),"- ",(0,r.kt)("inlineCode",{parentName:"td"},"patchObb"),(0,r.kt)("br",null),"You only need to specify this query parameter when you upload a OBB file.")))),(0,r.kt)("h2",a({},{id:"form-keys"}),"Form keys"),(0,r.kt)("p",null,"You can use form keys in the POST method to specify values when uploading your build to UDP. The values correspond to the Binary section of the Game Information tab."),(0,r.kt)("p",null,"The table below describes the form keys."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",a({parentName:"tr"},{align:null}),"Form key"),(0,r.kt)("th",a({parentName:"tr"},{align:null}),"\u63cf\u8ff0"),(0,r.kt)("th",a({parentName:"tr"},{align:null}),"Mandatory / Optional"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",a({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"uploadFile")),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"Specify the path to the file to upload."),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"Mandatory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",a({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"whatsNew")),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"Set the value of the field  ",(0,r.kt)("strong",{parentName:"td"},"What\u2019s New"),"  in the UDP console."),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"\u53ef\u9009")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",a({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"useGoogleService")),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"Set the value of the field  ",(0,r.kt)("strong",{parentName:"td"},"Does your game use Google Play Services?"),"  in the UDP console."),(0,r.kt)("td",a({parentName:"tr"},{align:null}),"\u53ef\u9009")))),(0,r.kt)("p",null,"If you don\u2019t specify optional keys, UDP uses the values of the latest version of your game."),(0,r.kt)("h2",a({},{id:"common-error-messages-and-error-codes"}),"Common error messages and error codes"),(0,r.kt)("h3",a({},{id:"invalid-authentication-token"}),"Invalid authentication token"),(0,r.kt)("p",null,"If you provide an invalid authentication token, you will get an error message with status code 401."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),'{"errorCode":"NotAuthenticated","message":"not authenticated error","target":"","details":null}\n')),(0,r.kt)("h3",a({},{id:"invalid-organization-id-or-client-id"}),"Invalid organization ID or client ID"),(0,r.kt)("p",null,"If you provide an invalid organization ID or an invalid client ID, you will get an error message with status code 400."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),'{"errorCode":"InvalidParameter","message":"The given parameter is missing or invalid","target":"Invalid OrgId or ClientId","details":null}\n')),(0,r.kt)("h3",a({},{id:"invalid-file-type"}),"Invalid file type"),(0,r.kt)("p",null,"If you provide an invalid file type, you will get an error message with status code 400."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),'{"errorCode":"InvalidParameter","message":"The given parameter is missing or invalid: please provide the right binary file(APK, AAB or OBB)","target":"file type","details":null}\n')),(0,r.kt)("h3",a({},{id:"invalid-obb-type"}),"Invalid OBB type"),(0,r.kt)("p",null,"If you provide an invalid OBB type, you will get an error message with status code 400."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),'{"errorCode":"InvalidParameter","message":"The given parameter is missing or invalid","target":"obbType","details":null}\n')),(0,r.kt)("h3",a({},{id:"invalid-content-type"}),"Invalid content type"),(0,r.kt)("p",null,"If you provide an invalid content type, you will get an error message with status code 400."),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{}),'{"errorCode":"InvalidParameter","message":"The given parameter is missing or invalid","target":"content type","details":null}\n')))}c.isMDXComponent=!0}}]);