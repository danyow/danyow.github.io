"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[25879],{35318:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var i=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),g=u(t),d=r,m=g["".concat(s,".").concat(d)]||g[d]||c[d]||o;return t?i.createElement(m,l(l({ref:n},p),{},{components:t})):i.createElement(m,l({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var u=2;u<o;u++)l[u]=t[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},89901:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return a},default:function(){return g},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});t(27378);var i=t(35318);function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},r.apply(this,arguments)}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={id:"\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6",slug:"/scripting-section/plugins/plugins-for-desktop"},a="\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6",s={unversionedId:"unity/scripting-section/plugins/\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6",id:"version-Unity@2022.1/unity/scripting-section/plugins/\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6",title:"\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6",description:"Plug-ins for desktop platforms are libraries of native code you can write in C, C++ and Objective C. This page describes plug-ins for macOS, Windows, and Linux. For more information see Native plug-ins.",source:"@site/versioned_docs/version-Unity@2022.1/unity/scripting-section/plugins/plugins-for-desktop.md",sourceDirName:"unity/scripting-section/plugins",slug:"/scripting-section/plugins/plugins-for-desktop",permalink:"/en/docs/scripting-section/plugins/plugins-for-desktop",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/docs/unity/scripting-section/plugins/plugins-for-desktop.md",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"3/31/2022",frontMatter:{id:"\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6",slug:"/scripting-section/plugins/plugins-for-desktop"},sidebar:"unity",previous:{title:"Import and configure plug-ins",permalink:"/en/docs/scripting-section/plugins/plugin-inspector"},next:{title:"Managed plug-ins",permalink:"/en/docs/scripting-section/plugins/using-dll"}},u={},p=[{value:"macOS plug-ins",id:"macos-plug-ins",level:2},{value:"\u8981\u6c42",id:"\u8981\u6c42",level:3},{value:"Windows plug-ins",id:"windows-plug-ins",level:2},{value:"Linux plug-ins",id:"linux-plug-ins",level:2},{value:"\u7ba1\u7406 Unity \u4e2d\u7684\u63d2\u4ef6",id:"\u7ba1\u7406-unity-\u4e2d\u7684\u63d2\u4ef6",level:2},{value:"Invoking your plug-in from a C# script",id:"invoking-your-plug-in-from-a-c-script",level:2},{value:"\u63d2\u4ef6\u793a\u4f8b",id:"\u63d2\u4ef6\u793a\u4f8b",level:2}],c={toc:p};function g(e){var{components:n}=e,t=o(e,["components"]);return(0,i.kt)("wrapper",r({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",r({},{id:"\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6"}),"\u6784\u5efa\u9002\u7528\u4e8e\u684c\u9762\u5e73\u53f0\u7684\u63d2\u4ef6"),(0,i.kt)("p",null,"Plug-ins for desktop platforms are libraries of native code you can write in C, C++ and Objective C. This page describes plug-ins for macOS, Windows, and Linux. For more information see ",(0,i.kt)("a",r({parentName:"p"},{href:"/en/docs/scripting-section/plugins/native-plugins"}),"Native plug-ins"),"."),(0,i.kt)("h2",r({},{id:"macos-plug-ins"}),"macOS plug-ins"),(0,i.kt)("p",null,"You can deploy macOS plug-ins as bundles or, if you are using the  ",(0,i.kt)("strong",{parentName:"p"},"IL2CPP"),"  scripting backend, loose C++ files, which you can invoke with ",(0,i.kt)("inlineCode",{parentName:"p"},'[DllImport("__Internal")]')," syntax. For further information on loose C++ plug-ins see ",(0,i.kt)("a",r({parentName:"p"},{href:"/en/docs/platform-specific/apple-mac/mac-osil2cppscripting-backend/mac-osplayer-cplus-plus-source-code-plugins-for-il2cpp"}),"C++ source code plugins for IL2CPP"),"."),(0,i.kt)("p",null,"To create the bundle project with XCode:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open XCode."),(0,i.kt)("li",{parentName:"ol"},"Select  ",(0,i.kt)("strong",{parentName:"li"},"File"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"New"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Project"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"macOS"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Framework & Library"),"  ",">","  ",(0,i.kt)("strong",{parentName:"li"},"Bundle")," .")),(0,i.kt)("p",null,"For more information about working with XCode see ",(0,i.kt)("a",r({parentName:"p"},{href:"https://developer.apple.com/documentation/xcode"}),"Apple\u2019s documentation on XCode"),"."),(0,i.kt)("h3",r({},{id:"\u8981\u6c42"}),"\u8981\u6c42"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can build your plug-in as a universal binary that is compatible with 64-bit architectures. Alternatively, you can provide separate dylib files."),(0,i.kt)("li",{parentName:"ul"},"If you are using C++ (.cpp) or Objective-C (.mm) to implement the plug-in, declare the functions with C linkage to avoid name mangling issues:")),(0,i.kt)("pre",null,(0,i.kt)("code",r({parentName:"pre"},{}),'extern "C"\n{\n  float ExamplePluginFunction ();\n}\n\n')),(0,i.kt)("h2",r({},{id:"windows-plug-ins"}),"Windows plug-ins"),(0,i.kt)("p",null,"Plug-ins on Windows are either .dll files with exported functions, or loose C++ files if you are using IL2CPP. You can use most languages and development environments that can create .dll files to create plug-ins. You must declare any C++ functions with C linkage to avoid name mangling issues."),(0,i.kt)("h2",r({},{id:"linux-plug-ins"}),"Linux plug-ins"),(0,i.kt)("p",null,"Plug-ins on Linux are .so files with exported functions. Although these libraries are usually in C or C++, you can use any language. You must declare any C++ functions with C linkage to avoid name mangling issues."),(0,i.kt)("h2",r({},{id:"\u7ba1\u7406-unity-\u4e2d\u7684\u63d2\u4ef6"}),"\u7ba1\u7406 Unity \u4e2d\u7684\u63d2\u4ef6"),(0,i.kt)("p",null,"In Unity, the  ",(0,i.kt)("strong",{parentName:"p"},"Plugin Inspector"),"  manages your plug-ins. To access the  ",(0,i.kt)("strong",{parentName:"p"},"Plugin Inspector")," , select a plug-in file in the  ",(0,i.kt)("strong",{parentName:"p"},"Project window")," . For Standalone platforms you can choose the CPU architecture with which the library is compatible. For cross platform plug-ins you must include the .bundle file (for macOS), the .dll file(for Windows), and the .so file (for Linux). Unity automatically picks the right plug-in for the target platform and includes it with the player. For further information see ",(0,i.kt)("a",r({parentName:"p"},{href:"/en/docs/scripting-section/plugins/plugin-inspector"}),"Import and configure plug-ins"),"."),(0,i.kt)("p",null,(0,i.kt)("img",r({parentName:"p"},{src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/plugin-inspector.png",alt:"Plugin Inspector"}))),(0,i.kt)("p",null,"Plugin Inspector"),(0,i.kt)("h2",r({},{id:"invoking-your-plug-in-from-a-c-script"}),"Invoking your plug-in from a C# script"),(0,i.kt)("p",null,"Place your built plug-in in the  ",(0,i.kt)("strong",{parentName:"p"},"Assets"),"  folder or the appropriate architecture-specific sub-directory in your Unity Project. Unity then finds it by name when you invoke it from a C# script. For example: ",(0,i.kt)("inlineCode",{parentName:"p"},'[DllImport ("PluginName")] private static extern float ExamplePluginFunction ();')),(0,i.kt)("p",null," ",(0,i.kt)("strong",{parentName:"p"},"Note")," : ",(0,i.kt)("inlineCode",{parentName:"p"},"PluginName")," should not include the library prefix or file extension (for example, the actual name of the plug-in file is PluginName.dll on Windows and libPluginName.so on Linux)."),(0,i.kt)("h2",r({},{id:"\u63d2\u4ef6\u793a\u4f8b"}),"\u63d2\u4ef6\u793a\u4f8b"),(0,i.kt)("p",null,"You can download and use these projects to learn how to implement plug-ins in Unity."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",r({parentName:"li"},{href:"https://github.com/Unity-Technologies/DesktopSamples/tree/master/SimplestPluginExample"}),"Simplest Plugin Example"),": This project implements basic operations (for example, print a number, print a string, add two floats and add two integers). This project includes Windows, macOS and Linux project files."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",r({parentName:"li"},{href:"https://github.com/Unity-Technologies/NativeRenderingPlugin"}),"Native Renderer Plugin"),": This is a low-level rendering plugin that renders a rotating triangle from C++ code after all regular rendering is done and fills a procedural texture from C++ code, using Texture.GetNativeTexturePtr to access it. This project includes Windows, UWP, macOS, WebGL and Android files.")))}g.isMDXComponent=!0}}]);