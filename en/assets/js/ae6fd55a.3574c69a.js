"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23465],{35318:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=s(t),d=r,N=k["".concat(o,".").concat(d)]||k[d]||u[d]||l;return t?a.createElement(N,i(i({ref:n},m),{},{components:t})):a.createElement(N,i({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=k;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},14743:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});t(27378);var a=t(35318);function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const i={layout:"post",title:"Rust",tags:["Mac","Rust","\u7b14\u8bb0"],comments:!0,date:"2019-12-04 22:39:06 +0800",published:!0},p=void 0,o={permalink:"/en/blog/2019/rust",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/blog/2019/rust.mdx",source:"@site/blog/2019/rust.mdx",title:"Rust",description:"Title: Mac \u4e0b\u5b66\u4e60\u4f7f\u7528 Rust",date:"2019-12-04T22:39:06.000Z",formattedDate:"December 4, 2019",tags:[{label:"Mac",permalink:"/en/blog/tags/mac"},{label:"Rust",permalink:"/en/blog/tags/rust"},{label:"\u7b14\u8bb0",permalink:"/en/blog/tags/\u7b14\u8bb0"}],readingTime:35.855,truncated:!1,authors:[],frontMatter:{layout:"post",title:"Rust",tags:["Mac","Rust","\u7b14\u8bb0"],comments:!0,date:"2019-12-04 22:39:06 +0800",published:!0},prevItem:{title:"\u90e8\u7f72\u65b0\u5b89\u88c5\u7684centos\u670d\u52a1\u5668",permalink:"/en/blog/2020/server"},nextItem:{title:"mac\u4e0a\u542f\u52a8\u6587\u4ef6\u670d\u52a1\u5668",permalink:"/en/blog/2019/mac"}},s={authorsImageUrls:[]},m=[{value:"\u5b89\u88c5",id:"\u5b89\u88c5",level:2},{value:"brew \u5b89\u88c5",id:"brew-\u5b89\u88c5",level:3},{value:"\u5b98\u7f51\u65b9\u6cd5",id:"\u5b98\u7f51\u65b9\u6cd5",level:3},{value:"\u5165\u95e8",id:"\u5165\u95e8",level:2},{value:"rustc \u7f16\u8bd1",id:"rustc-\u7f16\u8bd1",level:3},{value:"Cargo",id:"cargo",level:3},{value:"\u7f16\u5199\u731c\u8c1c\u6e38\u620f",id:"\u7f16\u5199\u731c\u8c1c\u6e38\u620f",level:3},{value:"\u901a\u7528\u7f16\u7a0b\u6982\u5ff5",id:"\u901a\u7528\u7f16\u7a0b\u6982\u5ff5",level:3},{value:"\u53d8\u91cf\u548c\u53ef\u53d8\u6027",id:"\u53d8\u91cf\u548c\u53ef\u53d8\u6027",level:4},{value:"\u8d44\u6599\u7c7b\u578b",id:"\u8d44\u6599\u7c7b\u578b",level:4},{value:"\u51fd\u6570",id:"\u51fd\u6570",level:4},{value:"\u6ce8\u91ca",id:"\u6ce8\u91ca",level:4},{value:"\u63a7\u5236\u6d41",id:"\u63a7\u5236\u6d41",level:4},{value:"\u6240\u6709\u6743",id:"\u6240\u6709\u6743",level:3},{value:"\u4ec0\u4e48\u662f\u6240\u6709\u6743",id:"\u4ec0\u4e48\u662f\u6240\u6709\u6743",level:4},{value:"\u5f15\u7528\u548c\u501f\u9605",id:"\u5f15\u7528\u548c\u501f\u9605",level:3},{value:"\u5207\u7247\u7c7b\u578b",id:"\u5207\u7247\u7c7b\u578b",level:4},{value:"\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u6784\u9020\u76f8\u5173\u6570\u636e",id:"\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u6784\u9020\u76f8\u5173\u6570\u636e",level:3},{value:"\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316\u7ed3\u6784",id:"\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316\u7ed3\u6784",level:4},{value:"\u65b9\u5757\u8bed\u6cd5",id:"\u65b9\u5757\u8bed\u6cd5",level:4},{value:"\u679a\u4e3e",id:"\u679a\u4e3e",level:4},{value:"\u4f7f\u7528\u5305(\u5934\u6587\u4ef6)",id:"\u4f7f\u7528\u5305\u5934\u6587\u4ef6",level:3},{value:"\u5305",id:"\u5305",level:4},{value:"\u6a21\u5757 <code>mod</code>",id:"\u6a21\u5757-mod",level:4},{value:"\u4f7f\u7528 <code>use</code> \u6765\u5f15\u5165\u8def\u5f84 \u7f29\u77ed\u8def\u5f84",id:"\u4f7f\u7528-use-\u6765\u5f15\u5165\u8def\u5f84-\u7f29\u77ed\u8def\u5f84",level:4},{value:"\u5e38\u7528\u7684\u4e00\u4e9b\u952e\u503c\u4fdd\u5b58\u7684\u4e1c\u897f",id:"\u5e38\u7528\u7684\u4e00\u4e9b\u952e\u503c\u4fdd\u5b58\u7684\u4e1c\u897f",level:3},{value:"\u77e2\u91cf",id:"\u77e2\u91cf",level:4},{value:"String",id:"string",level:4},{value:"HashMap",id:"hashmap",level:4},{value:"\u62a5\u9519 <code>panic!</code>",id:"\u62a5\u9519-panic",level:3},{value:"\u6cdb\u578b \u7279\u5f81 \u548c \u751f\u547d\u5468\u671f",id:"\u6cdb\u578b-\u7279\u5f81-\u548c-\u751f\u547d\u5468\u671f",level:3},{value:"\u7279\u5f81",id:"\u7279\u5f81",level:4},{value:"<code>lifetime</code> \u5bff\u547d",id:"lifetime-\u5bff\u547d",level:4},{value:"\u81ea\u52a8\u5316\u6d4b\u8bd5",id:"\u81ea\u52a8\u5316\u6d4b\u8bd5",level:3},{value:"\u6784\u5efa\u547d\u4ee4\u884c\u7a0b\u5e8f",id:"\u6784\u5efa\u547d\u4ee4\u884c\u7a0b\u5e8f",level:3},{value:"\u95ed\u5305\u548c\u8fed\u4ee3\u5668",id:"\u95ed\u5305\u548c\u8fed\u4ee3\u5668",level:3},{value:"\u95ed\u5305",id:"\u95ed\u5305",level:4},{value:"\u8fed\u4ee3\u5668",id:"\u8fed\u4ee3\u5668",level:4},{value:"Crates.io",id:"cratesio",level:3},{value:"\u667a\u80fd\u6307\u9488",id:"\u667a\u80fd\u6307\u9488",level:3},{value:"\u5e76\u53d1",id:"\u5e76\u53d1",level:3},{value:"\u7ebf\u7a0b",id:"\u7ebf\u7a0b",level:4},{value:"\u901a\u9053",id:"\u901a\u9053",level:4},{value:"\u4e0a\u9501",id:"\u4e0a\u9501",level:4}],u={toc:m};function k(e){var{components:n}=e,t=l(e,["components"]);return(0,a.kt)("wrapper",r({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Title: Mac \u4e0b\u5b66\u4e60\u4f7f\u7528 ",(0,a.kt)("em",{parentName:"p"},"Rust")),(0,a.kt)("h2",r({},{id:"\u5b89\u88c5"}),"\u5b89\u88c5"),(0,a.kt)("h3",r({},{id:"brew-\u5b89\u88c5"}),"brew \u5b89\u88c5"),(0,a.kt)("p",null,"\u6d4b\u8bd5\u4e4b\u540e, \u73af\u5883\u6709\u5f88\u591a\u5185\u5bb9\u6709\u6ca1\u5b89\u88c5\u4e0a, \u4f30\u8ba1\u4e5f\u662f\u6ca1\u6709\u914d\u7f6e\u73af\u5883\u7684\u539f\u56e0"),(0,a.kt)("h3",r({},{id:"\u5b98\u7f51\u65b9\u6cd5"}),"\u5b98\u7f51\u65b9\u6cd5"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5bfc\u5165\u73af\u5883\u53c2\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},'export PATH="$PATH:$HOME/.cargo/bin"'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"rustc --version")))),(0,a.kt)("h2",r({},{id:"\u5165\u95e8"}),"\u5165\u95e8"),(0,a.kt)("h3",r({},{id:"rustc-\u7f16\u8bd1"}),"rustc \u7f16\u8bd1"),(0,a.kt)("p",null,"\u968f\u4fbf\u5199\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"main.rs")," \u6587\u4ef6, \u7136\u540e\u952e\u5165\u4e0b\u8ff0\u5185\u5bb9."),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'fn main() {\n    println!("Hello, world!");\n}\n')),(0,a.kt)("p",null,"\u7136\u540e\u6267\u884c",(0,a.kt)("inlineCode",{parentName:"p"},"rustc main.rs"),"\u5f97\u5230\u7f16\u8bd1\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6",(0,a.kt)("inlineCode",{parentName:"p"},"./main"),"\u5373\u53ef\u770b\u5230\u6253\u5370"),(0,a.kt)("h3",r({},{id:"cargo"}),"Cargo"),(0,a.kt)("p",null,"\u5982\u679c\u5b89\u88c5\u7684\u65f6\u5019\u7528\u7684\u662f\u5b98\u7f51\u7684\u65b9\u6cd5\u7684\u8bdd, \u662f\u4f1a\u8ba9\u4f60\u9009\u62e9\u7b2c\u51e0\u4e2a\u5b89\u88c5\u65b9\u5f0f, \u6211\u4eec\u901a\u5e38\u9009\u62e9\u7b2c\u4e00\u4e2a\u91c7\u7528\u9ed8\u8ba4\u7684\u65b9\u5f0f, \u8fd9\u6837\u5c31\u4f1a\u628aCargo\u6240\u9700\u8981\u7684\u4e5f\u5c31\u4e00\u8d77\u4e0b\u8f7d\u5b89\u88c5\u4e0b\u6765\u4e86. \u5728\u5230\u6211\u4eec\u914d\u7f6e\u73af\u5883\u8f93\u5165\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"PATH"),"\u4e5f\u662f\u4e00\u6837"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u65b0\u5efa\u9879\u76ee\n",(0,a.kt)("inlineCode",{parentName:"p"},"cargo new hello_cargo"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7f16\u8bd1\u9879\u76ee\n",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build --release"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u8fd0\u884c\u9879\u76ee\n",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run")))),(0,a.kt)("h3",r({},{id:"\u7f16\u5199\u731c\u8c1c\u6e38\u620f"}),"\u7f16\u5199\u731c\u8c1c\u6e38\u620f"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u76f4\u63a5\u7f16\u5199"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::io;    // \u4f7f\u7528\u6807\u51c6\u5e93\u7684io\n\nfn main() {\n    println!("Guess the number!");\n\n    println!("Please input your guess.");\n\n    let mut guess = String::new(); // \u5b9a\u4e49\u4e00\u4e2a\u53ef\u53d8\u7684\u53d8\u91cf\n\n    io::stdin().read_line(&mut guess)   // \u6362\u884c\u7684\u539f\u56e0\u53ea\u662f\u56e0\u4e3a\u8fc7\u957f\u4e86\n        .expect("Failed to read line"); // \u5904\u7406\u53ef\u80fd\u7684\u62a5\u9519\n\n    println!("You guessed: {}", guess);\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u52a0\u5165",(0,a.kt)("inlineCode",{parentName:"p"},"rand"),"\u5e93"),(0,a.kt)("p",{parentName:"li"},"\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),"\u6587\u4ef6\u4e2d\u52a0\u5165"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-toml"}),'[dependencies]\n\nrand = "0.3.14"\n')),(0,a.kt)("p",{parentName:"li"},"\u7136\u540e\u7f16\u8bd1",(0,a.kt)("inlineCode",{parentName:"p"},"cargo build"),"\u6216\u8005\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run"),"\u53ef\u80fd\u4f1a\u9047\u5230\n",(0,a.kt)("inlineCode",{parentName:"p"},"Blocking waiting for file lock on package cache"),"\n\u5982\u679c\u6267\u884c\u5f97\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"cargo update"),"\u5c31\u4e0d\u4f1a\u9047\u5230",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.lock"),"\u6587\u4ef6\u4e86"),(0,a.kt)("p",{parentName:"li"},"\u8fd9\u91cc\u6307\u5b9a\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"0.3.14"),"\u7248\u672c\u5e76\u4e0d\u662f\u771f\u7684\u5c31\u53ea\u4f7f\u7528\u8be5\u7248\u672c, \u800c\u662f\u4f1a\u4f7f\u7528\u517c\u5bb9\u8be5\u7248\u672c\u7684\u66f4\u9ad8\u7248\u672c"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::io;\nuse rand::Rng;  // \u5bfc\u5165 \u968f\u673a\u5e93\n\nfn main() {\n    println!("Guess the number!");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);   // \u751f\u6210\u4e00\u4e2a 0 ~ 100 \u7684\u968f\u673a\u6570\n\n    println!("The secret number is: {}", secret_number);    // \u6d4b\u8bd5\u6253\u5370\n\n    println!("Please input your guess.");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&mut guess)\n        .expect("Failed to read line");\n\n    // trim \u7684\u662f\u5c31\u662f\u5220\u9664\u67d0\u4e9b\u4e1c\u897f \u7531\u4e8e \u952e\u5165\u7684\u65f6\u5019\u6700\u540e\u9762\u4f1a\u6572\u51fb\u56de\u8f66 \u5bfc\u81f4\\n\u4f1a\u52a0\u5165\u8fdb\u6765\n    let guess: u32 = guess.trim().parse()   // \u7528 \u540c\u4e00\u4e2a\u53d8\u91cf\u540d \u53bb\u8986\u76d6 guess \u5e76\u8f6c\u6210 u32\u7c7b\u578b\n        .expect("Please type a number!");   // \u8f6c\u6362\u7c7b\u578b\u4e5f\u662f\u6709\u53ef\u80fd\u62a5\u9519\u7684\n\n    println!("You guessed: {}", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!("Too small!"),\n        Ordering::Greater => println!("Too big!"),\n        Ordering::Equal => println!("You win!"),\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u52a0\u5165\u5faa\u73af"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'// --snip--\n\n    println!("The secret number is: {}", secret_number);\n\n    loop {  // \u52a0\u5165\u5faa\u73af\n        println!("Please input your guess.");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!("Too small!"),\n            Ordering::Greater => println!("Too big!"),\n            Ordering::Equal => {\n                println!("You win!");\n                break;  // \u5728\u8fd9\u91cc\u9000\u51fa\u5faa\u73af\n            },\n        }\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5904\u7406\u975e\u6570\u5b57\u7684\u8f93\u5165"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'// --snip--\n\nio::stdin().read_line(&mut guess)\n    .expect("Failed to read line");\n\n// \u52a0\u5165match\u6765\u5bf9\u62a5\u9519\u7684 continue\u6765\u5904\u7406\u975e\u6570\u5b57\u7684\u8f93\u5165\nlet guess: u32 = match guess.trim().parse() {\n    Ok(num) => num,\n    Err(_) => continue,\n};\n\nprintln!("You guessed: {}", guess);\n\n// --snip--\n')))),(0,a.kt)("h3",r({},{id:"\u901a\u7528\u7f16\u7a0b\u6982\u5ff5"}),"\u901a\u7528\u7f16\u7a0b\u6982\u5ff5"),(0,a.kt)("h4",r({},{id:"\u53d8\u91cf\u548c\u53ef\u53d8\u6027"}),"\u53d8\u91cf\u548c\u53ef\u53d8\u6027"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u8fd9\u91cc\u7684\u53d8\u91cf\u4e0d\u662f\u6307\u80fd\u53d8\u7684\u91cf, \u800c\u662f\u4e00\u4e2a\u5b9a\u4e49, \u4f46\u53ea\u8981\u8d4b\u4e88\u4e86 ",(0,a.kt)("inlineCode",{parentName:"li"},"mut")," \u624d\u662f\u771f\u7684\u53ef\u4ee5\u53d8"),(0,a.kt)("li",{parentName:"ol"},"\u5e38\u91cf\u7684\u547d\u540d\u89c4\u5219 \u5355\u8bcd\u5168\u5927\u5199 \u4e0b\u5212\u7ebf\u5206\u9694 \u5c31\u8fdeint ",(0,a.kt)("inlineCode",{parentName:"li"},"100,000")," \u90fd\u53ef\u4ee5\u8868\u793a\u4e3a ",(0,a.kt)("inlineCode",{parentName:"li"},"100_000")),(0,a.kt)("li",{parentName:"ol"},"\u53d8\u91cf\u53ef\u4ee5\u88ab\u91cd\u590d\u58f0\u660e\u5e76\u8986\u76d6\u539f\u503c \u4f46\u4e0d\u80fd\u6539\u53d8\u539f\u6709\u6570\u636e\u7c7b\u578b \u4e5f\u5c31\u662f\u4e0d\u80fd string => int")),(0,a.kt)("h4",r({},{id:"\u8d44\u6599\u7c7b\u578b"}),"\u8d44\u6599\u7c7b\u578b"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7f16\u8bd1\u65f6\u9700\u8981\u5e2e\u5fd9\u786e\u5b9a\u7c7b\u578b"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let guess: u32 = "42".parse().expect("Not a number!");\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6574\u578b\u7684\u8868\u793a\u5f62\u5f0f\u6709"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"/*\n    \u5c0f\u6570        98_222\n    \u5341\u516d        0xff\n    \u516b\u8fdb        0o77\n    \u4e8c\u5143        0b1111_0000\n    \u5b57\u8282\uff08u8\u4ec5\uff09 b'A'\n*/\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"bool\u7c7b\u578b\u5c31\u53ea\u6709\u771f\u5047 \u4e0d\u4f1a\u9ed8\u8ba4\u5e2e\u5fd9\u8f6c\u6362")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5143\u7ec4"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n    let five_hundred = x.0;\n    let six_point_four = x.1;\n    let one = x.2;\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6570\u7ec4"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn main() {\n    let c: [i32; 5] = [1, 2, 3, 4, 5];\n    let b = [3; 5];\n    let a = [1, 2, 3, 4, 5];\n    let first = a[0];\n    let second = a[1];\n}\n")))),(0,a.kt)("h4",r({},{id:"\u51fd\u6570"}),"\u51fd\u6570"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e0d\u5e26;\u8868\u793a\u8fd4\u56de\u503c")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u8fd4\u56de\u503c"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn plus_one(x: i32) -> i32 {\n    x + 1\n}\n")))),(0,a.kt)("h4",r({},{id:"\u6ce8\u91ca"}),"\u6ce8\u91ca"),(0,a.kt)("p",null,"\u8bb2\u89e3Crates.io\u7684\u65f6\u5019\u624d\u8bf4"),(0,a.kt)("h4",r({},{id:"\u63a7\u5236\u6d41"}),"\u63a7\u5236\u6d41"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"if"),"\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"let"),"\u8bed\u53e5"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),' fn main() {\n     let condition = true;\n     let number = if condition {\n         5\n     } else {\n         6\n     };\n\n     println!("The value of number is: {}", number);\n }\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4ece\u5faa\u73af\u91cc\u9762\u8fd4\u56de\u503c\u51fa\u6765"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'fn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;// \u6211\u5728\u60f3 \u8fd9\u91cc\u6ca1\u6709; \u4e3a\u4ec0\u4e48\u4e5f\u80fd\u6709\u503c\u8fd4\u56de\u51fa\u53bb\u5462?\n        }\n    };\n\n    println!("The result is {}", result);\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u904d\u5386"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'fn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    // \u65b9\u6cd51\n    for element in a.iter() {\n        println!("the value is: {}", element);\n    }\n    // \u65b9\u6cd52\n    for number in (1..4).rev() {\n        println!("{}!", number);\n    }\n    // \u65b9\u6cd53\n    while index < 5 {\n        println!("the value is: {}", a[index]);\n        index += 1;\n    }\n}\n')))),(0,a.kt)("h3",r({},{id:"\u6240\u6709\u6743"}),"\u6240\u6709\u6743"),(0,a.kt)("h4",r({},{id:"\u4ec0\u4e48\u662f\u6240\u6709\u6743"}),"\u4ec0\u4e48\u662f\u6240\u6709\u6743"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6bcf\u4e2a\u5185\u5b58\u53ea\u80fd\u88ab\u6240\u6709\u4e00\u6b21, \u4e00\u65e6\u88ab\u63a5\u7ba1\u4e86\u5c31\u6ca1\u4e86."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'// \u4e0b\u8ff0\u4ee3\u7801\u5c31\u4f1a\u62a5\u9519\nlet s1 = String::from("hello");\nlet s2 = s1;\n\nprintln!("{}, world!", s1);\n\n/*\n    error[E0382]: use of moved value: `s1`\n    --\x3e src/main.rs:5:28\n    |\n    3 |     let s2 = s1;\n    |         -- value moved here\n    4 |\n    5 |     println!("{}, world!", s1);\n    |                            ^^ value used here after move\n    |\n    = note: move occurs because `s1` has type `std::string::String`, which does\n    not implement the `Copy` trait\n*/\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5982\u679c\u60f3\u8981\u62ff\u5230\u4e00\u6837\u7684\u5185\u5bb9\u7684\u8bdd \u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"clone"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5bf9\u57fa\u7840\u6570\u636e\u7c7b\u578b\u64cd\u4f5c\u7684\u662f \u4f1a\u81ea\u52a8\u8c03\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"copy"),", \u7531\u4e8e\u90fd\u662f\u5728\u6808\u533a, \u4e0d\u4f1a\u4ea7\u751f\u65b0\u7684\u5185\u5b58\u7a7a\u95f4")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5982\u679c\u76f4\u63a5\u628a\u67d0\u4e2a\u53d8\u91cf\u4ea4\u4ed8\u7ed9\u67d0\u4e2a\u51fd\u6570, \u800c\u8be5\u51fd\u6570\u6ca1\u6709\u79fb\u4ea4\u6240\u6709\u6743\u51fa\u6765\u7684\u8bdd, \u4ed6\u5c06\u4e0d\u80fd\u518d\u88ab\u4f7f\u7528\u4e86"))),(0,a.kt)("h3",r({},{id:"\u5f15\u7528\u548c\u501f\u9605"}),"\u5f15\u7528\u548c\u501f\u9605"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"&")," \u8868\u793a\u5f15\u7528\u8be5\u53c2\u6570, \u4f46\u4e0d\u80fd\u8fdb\u884c\u53d8\u66f4, \u5982\u679c\u8981\u53d8\u66f4\u7684\u8bdd \u9700\u8981 ",(0,a.kt)("inlineCode",{parentName:"p"},"&mut")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'fn main() {\n    let mut s = String::from("hello");\n\n    change(&mut s);\n}\n\nfn change(some_string: &mut String) {\n    some_string.push_str(", world");\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e0d\u80fd\u6709\u4e24\u6b21\u53ef\u53d8\u5f15\u7528, \u56e0\u4e3a\u4e0d\u77e5\u9053\u4f9d\u636e\u8c01\u7684\u6539\u53d8")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u540c\u4e0a, \u5982\u679c\u8fd8\u5b58\u5728\u591a\u4e2a\u540e\u7eed\u4f9d\u65e7\u4f1a\u4f7f\u7528\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u5019, \u4e0d\u80fd\u521b\u5efa\u53ef\u53d8\u5f15\u7528, \u56e0\u4e3a\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\u662f\u4e0d\u77e5\u9053\u53ef\u53d8\u5f15\u7528\u7684\u5b58\u5728\u7684, \u4f46\u5982\u679c\u5728\u4f7f\u7528\u540e\u5e76\u4e14\u540e\u7eed\u4e0d\u518d\u4f7f\u7528\u4e86\u4e4b\u540e, \u5c31\u5141\u8bb8\u521b\u5efa\u53ef\u53d8\u5f15\u7528\u4e86"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let mut s = String::from("hello");\n\nlet r1 = &s; // no problem\nlet r2 = &s; // no problem\nprintln!("{} and {}", r1, r2);  // \u8fd9\u91cc\u4f7f\u7528\u4e4b\u540e \u540e\u7eed\u5c31\u4e0d\u518d\u4f7f\u7528\u4e86 \u8bf4\u660e\u662f\u53ef\u4ee5\u7684\n// r1 and r2 are no longer used after this point\n\nlet r3 = &mut s; // no problem\nprintln!("{}", r3);\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u60ac\u7a7a, \u4ec0\u4e48\u610f\u601d\u5462, \u53ef\u4ee5\u7406\u89e3\u4e3a\u50f5\u5c38\u6307\u9488"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),' fn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -> &String {    // \u8fd9\u91cc\u5c06\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u5f15\u7528\u7684\u6570\u636e\u7c7b\u578b\n    let s = String::from("hello");  // \u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b, \u5f00\u8f9f\u53ef\u4ee5\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\n\n    &s  // \u79fb\u4ea4\u5f15\u7528\u51fa\u53bb \u4ee3\u8868\u662f \u6211\u53ea\u662f\u501f\u4f60\u62ff\u53bb\u7528\u7684\u610f\u601d\n}   // \u4f46\u8fd9\u91cc\u5c31\u5df2\u7ecf\u88ab\u91ca\u653e\u4e86 \u4ea7\u751f \u50f5\u5c38\u6307\u9488\n\nfn no_dangle() -> String {\n    let s = String::from("hello");\n\n    s   // \u8fd9\u91cc\u662f\u628a\u6240\u6709\u6743\u7ed9\u51fa\u53bb\u4e86 \u4ee3\u8868\u662f \u6211\u5f00\u8f9f\u7684\u7a7a\u95f4 \u6211\u4e0d\u8981\u4e86 \u4f60\u62ff\u53bb\u7528\u5427\n}   // \u8fd9\u6837\u7ed9\u51fa\u53bb\u7684\u5185\u5b58\u5c31\u4e0d\u4f1a\u88ab\u91ca\u653e\u4e86\n')))),(0,a.kt)("h4",r({},{id:"\u5207\u7247\u7c7b\u578b"}),"\u5207\u7247\u7c7b\u578b"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5148\u770b\u4e00\u4e2a\u83b7\u53d6\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u51fd\u6570"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"// \u501f\u9605\u4e00\u4e2a\u5b57\u7b26\u4e32   \u8fd4\u56de\u5355\u8bcd\u7684\u4e0b\u6807\nfn first_word(s: &String) -> usize {\n    // \u8f6c\u6362\u4e3a\u6570\u7ec4\n    let bytes = s.as_bytes();\n\n    // \u904d\u5386 bytes.iter() \u5e76\u4e14\u521b\u5efa\u8fed\u4ee3\u5668 enumerate() \u53ef\u4ee5\u7406\u89e3\u4e3a enumerate() \u4f1a\u4ea7\u751f\u51fa\u4e00\u4e2a\u5143\u7ec4\u6765\n    for (i, &item) in bytes.iter().enumerate() {\n        //  \u501f\u9605\u5230\u4e86 item\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len() // \u4e4d\u4e00\u770b\u6ca1\u6709\u95ee\u9898 \u4f46, \u5176\u5b9e\u8fd9\u91cc\u6d89\u53ca\u5230\u4e86\u5f88\u591a\u95ee\u9898, \u6bd4\u65b9\u5355\u8bcd\u957f\u5ea6\u672a\u77e5\u548c s \u88ab\u9500\u6bc1\u4e86 \u8fd9\u7ec4\u6570\u636e\u5c31\u5931\u6548\u4e86\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5f15\u5165\u5207\u7247"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'\nfn main() {\n    let s = String::from("hello");\n\n    let len = s.len();\n    let slice = &s[0..2];\n    let slice = &s[..2];\n    let slice = &s[3..len];\n    let slice = &s[3..];\n    let slice = &s[0..len];\n    let slice = &s[..];\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"&str")," \u8868\u793a\u7684\u662f\u5207\u7247\u7c7b\u578b ",(0,a.kt)("inlineCode",{parentName:"p"},"&String")," \u8868\u793a\u7684\u5b57\u7b26\u4e32\u7c7b\u578b")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6709\u4e86\u5207\u7247\u8fd9\u4e2a\u6982\u5ff5\u4e4b\u540e\u5c31\u53ef\u4ee5\u6539\u5199\u53d6\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u51fd\u6570\u4e86"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn first_word(s: &String) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];    // \u76f4\u63a5\u8fd4\u56de\u5207\u7247\n        }\n    }\n    // \u521a\u597d\u8fd9\u91cc\u7684 s \u662f\u501f\u6765\u7684 \u6240\u4ee5\u76f4\u63a5\u62ff\u7740\u8fd9\u73a9\u610f \u8f6c\u501f\u7ed9\u522b\u4eba\u5c31\u884c\u4e86 \u6ca1\u6211\u5565\u4e8b\u4e86\u7684\u610f\u601d\n    &s[..]\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'fn main() {\n    let mut s = String::from("hello world");\n\n    let word = first_word(&s); // \u8fd9\u4e2a\u5207\u7247\u8fd8\u662f\u7528\u7684 s \u7684\n\n    s.clear(); // \u8fd9\u91cc\u5c31\u4f1a\u76f4\u63a5\u62a5\u9519\u4e86 \u56e0\u4e3a\u4f1a\u83b7\u53d6s\u7684\u53ef\u53d8\u5f15\u7528\u5e76\u4e14\u628a\u5b83\u6e05\u7a7a, \u800c world\u662f first_word \u501f\u4e86s\u53c8\u8f6c\u624b\u7ed9\u4e86word\u7684\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\n\n    println!("the first word is: {}", word);\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u628a\u4f20\u5165\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"&String")," \u7c7b\u578b\u53d8\u6210 ",(0,a.kt)("inlineCode",{parentName:"p"},"&str")," \u7c7b\u578b \u5c31\u53ef\u4ee5\u63a5\u53d7 \u5207\u7247\u548c\u5b57\u7b26\u4e32\u4e86 \u56e0\u4e3a\u5b57\u7b26\u4e32\u5c31\u662f\u5168\u5207\u7247")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5176\u4ed6\u7684\u5207\u7247"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"    let a = [1, 2, 3, 4, 5];    // \u4ed6\u7684\u7c7b\u578b\u662f   [i32; 5]\n    let slice = &a[1..3];       // \u5207\u7247\u7684\u7c7b\u578b\u662f &[i32]\n")))),(0,a.kt)("h3",r({},{id:"\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u6784\u9020\u76f8\u5173\u6570\u636e"}),"\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u6784\u9020\u76f8\u5173\u6570\u636e"),(0,a.kt)("h4",r({},{id:"\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316\u7ed3\u6784"}),"\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316\u7ed3\u6784"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'struct User {\n    username: String,   // \u73b0\u5728\u5148\u4e0d\u58f0\u660e\u4e3a &str \u5207\u7247\u7c7b\u578b \u4f1a\u6d89\u53ca\u5230\u751f\u547d\u5468\u671f\n    email: String,\n    sign_in_count: u64,\n    active: bool,\n}\n\nfn build_user(email: String, username: String) -> User {\n    User {\n        email: email,\n        username: username,\n        active: true,\n        sign_in_count: 1,\n    }\n}\n// \u7b80\u5316\u5199\u6cd5\nfn build_user(email: String, username: String) -> User {\n    User {\n        email,\n        username,\n        active: true,\n        sign_in_count: 1,\n    }\n}\n\nfn main() {\n    let mut user1 = User {\n        email: String::from("someone@example.com"),\n        username: String::from("someusername123"),\n        active: true,\n        sign_in_count: 1,\n    };\n\n    // \u70b9\u8bed\u6cd5\u76f4\u63a5\u66f4\u6539\n    user1.email = String::from("anotheremail@example.com");\n\n    // \u65b0\u5efauser2\n    let user2 = User {\n        email: String::from("another@example.com"),\n        username: String::from("anotherusername567"),\n        active: user1.active,\n        sign_in_count: user1.sign_in_count,\n    };\n\n    // \u4f46\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\n    let user2 = User {\n        email: String::from("another@example.com"),\n        username: String::from("anotherusername567"),\n        ..user1 // \u5176\u4ed6\u5b57\u6bb5\u6cbf\u7528\u8be5\u5b9e\u4f8b\n    };\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5143\u7ec4\u7ed3\u6784"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nlet black = Color(0, 0, 0);\nlet origin = Point(0, 0, 0);\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6253\u5370\u7ed3\u6784 \u9996\u5148\u6dfb\u52a0 ",(0,a.kt)("inlineCode",{parentName:"p"},"#[derive(Debug)]")," \u548c \u7136\u540e\u6539 ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," \u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"{:?}")," \u6216 ",(0,a.kt)("inlineCode",{parentName:"p"},"{:#?}")," \u591a\u884c\u6253\u5370\n\u5355\u884c\u6253\u5370 : \u8868\u793a\u6253\u5370\u51fa\u6765\u7684\u952e\u503c\u4e2d\u95f4\u7684 : ? \u8868\u793a\u7684\u662f \u503c # \u8868\u793a\u7acb\u8d77\u6765 \u53d8\u6210\u591a\u884c \u5f62\u5f0f\u4e3b\u4e49.. \u4e2a\u4eba\u7406\u89e3"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn test_rect() {\n    let rect1 = Rectangle { width: 30, height: 50 };\n\n    println!("rect1 is {:?}", rect1);   // \u8868\u793a\u7684\u610f\u601d\u662f\n    println!("rect1 is {:#?}", rect1);\n}\n\n')))),(0,a.kt)("h4",r({},{id:"\u65b9\u5757\u8bed\u6cd5"}),"\u65b9\u5757\u8bed\u6cd5"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9e\u73b0\u4e00\u4e2a\u65b9\u6cd5"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\n// \u5b9e\u73b0 \u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u73b0\nimpl Rectangle {\n    // \u8fd9\u91cc\u7684self\u90fd\u53ea\u662f\u501f\u6765\u7684 \u53ea\u505a\u8bbf\u95ee\u53d8\u91cf\u4f7f\u7528\n    // \u4f46\u5982\u679c\u8981\u7528\u6765\u4fee\u6539\u5176\u5185\u5bb9\u7684\u8bdd \u4e5f\u662f\u9700\u8981\u52a0\u4e0amut\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n}\n\nimpl Rectangle {\n    // \u53ef\u4ee5\u7406\u89e3\u4e3a\u5b9a\u4e49\u4e86\u4e00\u4e2a \u7c7b\u51fd\u6570 \u53ea\u80fd\u901a\u8fc7\u7c7b\u6765\u8c03\u7528 \u8c03\u7528\u65b9\u5f0f \u91c7\u7528 :: \u53cc\u5192\u53f7\u5f62\u5f0f\n    fn square(size: u32) -> Rectangle {\n        Rectangle { width: size, height: size }\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle { width: 30, height: 50 };\n\n    println!(\n        "The area of the rectangle is {} square pixels.",\n        rect1.area()\n    );\n\n    let sq = Rectangle::square(3)\n}\n\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u81ea\u52a8\u4fee\u6539\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7c7b\u578b, \u4ec5\u4ec5\u9488\u5bf9 ",(0,a.kt)("inlineCode",{parentName:"p"},"self")," \u53c2\u6570   \u4f1a\u81ea\u52a8\u6dfb\u52a0\u4ed6\u7684\u53d8\u4f53 ",(0,a.kt)("inlineCode",{parentName:"p"},"&"),"\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"&mut")," \u6216 ",(0,a.kt)("inlineCode",{parentName:"p"},"*")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"#![allow(unused_variables)]\nfn main() {\n    #[derive(Debug,Copy,Clone)]\n    struct Point {\n        x: f64,\n        y: f64,\n    }\n\n    impl Point {\n        fn distance(&self, other: &Point) -> f64 {\n            let x_squared = f64::powi(other.x - self.x, 2);\n            let y_squared = f64::powi(other.y - self.y, 2);\n\n            f64::sqrt(x_squared + y_squared)\n        }\n    }\n    let p1 = Point { x: 0.0, y: 0.0 };\n    let p2 = Point { x: 5.0, y: 6.5 };\n    // \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u8c03\u7528\u65f6\u4e00\u65e0\u6240\u8c13\u7684\n    p1.distance(&p2);\n    (&p1).distance(&p2);\n}\n")))),(0,a.kt)("h4",r({},{id:"\u679a\u4e3e"}),"\u679a\u4e3e"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e0d\u5f97\u4e0d\u627f\u8ba4 \u8fd9\u4e48\u6ca1\u6709\u5f88\u5438\u5f15\u6211"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"// \u6b63\u5e38\u4f7f\u7528\nenum IpAddrKind {\n    V4,\n    V6,\n}\n// \u6df7\u7528\nenum IpAddr {\n    V4(u8, u8, u8, u8),\n    V6(String),\n}\n\nstruct Ipv4Addr {\n// --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\n// \u7ed3\u6784\u4f53\u4f7f\u7528\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n\n// \u5f3a\u5927\u6240\u5728\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nimpl Message {\n    // \u8fd8\u80fd...\u5b9e\u73b0 \u51fd\u6570!!!\n    fn call(&self) {\n        // method body would be defined here\n    }\n}\n\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Option\nnull\u7684\u53d1\u660e\u8005Tony Hoare\u57282009\u5e74\u7684\u6f14\u8bb2\u201c Null References\uff1a\u5341\u4ebf\u7f8e\u5143\u7684\u9519\u8bef\u201d\u4e2d\u8bf4\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-text"}),"    \u6211\u79f0\u4e4b\u4e3a\u6211\u7684\u5341\u4ebf\u7f8e\u5143\u9519\u8bef\u3002\u5f53\u65f6\uff0c\u6211\u6b63\u5728\u8bbe\u8ba1\u7b2c\u4e00\u4e2a\u5168\u9762\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u4ee5\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u8fdb\u884c\u5f15\u7528\u3002\u6211\u7684\u76ee\u6807\u662f\u786e\u4fdd\u6240\u6709\u5f15\u7528\u7684\u4f7f\u7528\u90fd\u7edd\u5bf9\u5b89\u5168\uff0c\u5e76\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u6267\u884c\u68c0\u67e5\u3002\u4f46\u662f\u6211\u5fcd\u4e0d\u4f4f\u8981\u63d2\u5165\u4e00\u4e2a\u7a7a\u5f15\u7528\u7684\u8bf1\u60d1\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u5b83\u662f\u5982\u6b64\u5bb9\u6613\u5b9e\u73b0\u3002\u8fd9\u5bfc\u81f4\u4e86\u65e0\u6570\u9519\u8bef\uff0c\u6f0f\u6d1e\u548c\u7cfb\u7edf\u5d29\u6e83\uff0c\u5728\u6700\u8fd1\u56db\u5341\u5e74\u4e2d\u53ef\u80fd\u9020\u6210\u5341\u4ebf\u7f8e\u5143\u7684\u75db\u82e6\u548c\u7834\u574f\u3002\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'enum Option<T> {\n    Some(T),    // \u6cdb\u578b\n    None,\n}\nfn main() {\n    let some_number = Some(5);\n    let some_string = Some("a string");     // Some \u76f4\u63a5\u8d4b\u503c\u5373\u53ef\u63a8\u6d4b\u7c7b\u578b\u4e86\n    let absent_number: Option<i32> = None;  // None \u6ca1\u6709\u7c7b\u578b \u90a3\u4e48\u5c31\u9700\u8981\u6307\u4ee3\u7c7b\u578b\n}\n')),(0,a.kt)("p",{parentName:"li"},"\u52a0\u5165Option \u65e8\u5728\u9650\u5236null\u7684\u666e\u904d\u6027\u5e76\u63d0\u9ad8Rust\u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5339\u914d\u63a7\u5236\u6d41 ",(0,a.kt)("inlineCode",{parentName:"p"},"match")),(0,a.kt)("p",{parentName:"li"},"\u4e00\u4e2a\u5f3a\u5927\u7684\u6b66\u5668"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'enum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,      // 1 \u7f8e\u5206\n    Nickel,     // 5 \u7f8e\u5206\n    Dime,       // 10 \u7f8e\u5206\n    Quarter(UsState),    // 25 \u7f8e\u5206\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        // \u7c7b\u51fd\u6570\u7684\u8c03\u7528\u65b9\u5f0f \u6307\u5b9a \u679a\u4e3e\u7684\u6bcf\u4e2a\u503c\n        Coin::Penny => {    // => \u5339\u914d\u540e\u76f4\u63a5\u8d4b\u503c\u7684\u610f\u601d\n            println!("Lucky penny!");\n            1   // \u8fd4\u56de\u503c\u4e3a1\n        },\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter(state) => {\n            println!("State quarter from {:?}!", state);\n            25\n        },\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"match")," \u642d\u914d ",(0,a.kt)("inlineCode",{parentName:"p"},"Option<T>")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn plus_one(x: Option<i32>) -> Option<i32> {\n    match x {\n        None => None,\n        Some(i) => Some(i + 1),\n    }\n}\n\nlet five = Some(5);\nlet six = plus_one(five);\nlet none = plus_one(None);\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"_")," \u5360\u4f4d\u7b26 \u7c7b\u4f3c\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"default")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let some_u8_value = 0u8; // \u7b49\u4ef7\u4e8e  let some_u8_value : u8 = 1; \nmatch some_u8_value {\n    1 => println!("one"),\n    3 => println!("three"),\n    5 => println!("five"),\n    7 => println!("seven"),\n    _ => (),\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5c31\u7b97\u4f7f\u7528\u4e86\u5360\u4f4d\u7b26 \u4f46\u5982\u679c\u6211\u4eec\u53ea\u8981\u5339\u914d\u4e00\u79cd\u6a21\u5f0f\u7684\u8bdd \u7528",(0,a.kt)("inlineCode",{parentName:"p"},"match"),"\u6709\u70b9\u7109\u7528\u725b\u5200\u7684\u611f\u89c9\u4e86 \u6240\u4ee5\u5f15\u5165\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"if let")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'// \u725b\u5200\u6a21\u5f0f\nlet some_u8_value = Some(0u8);\nmatch some_u8_value {\n    Some(3) => println!("three"),\n    _ => (),\n}\n// \u7b80\u7ea6\u6a21\u5f0f\nif let Some(3) = some_u8_value {\n    println!("three");\n}\n\n')),(0,a.kt)("p",{parentName:"li"},"\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176",(0,a.kt)("inlineCode",{parentName:"p"},"if let"),"\u89c6\u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"match"),"\u5f53\u503c\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u7136\u540e\u5ffd\u7565\u6240\u6709\u5176\u4ed6\u503c\u65f6\u8fd0\u884c\u4ee3\u7801\u7684\u8bed\u6cd5\u8bed\u6cd5\u3002"))),(0,a.kt)("h3",r({},{id:"\u4f7f\u7528\u5305\u5934\u6587\u4ef6"}),"\u4f7f\u7528\u5305(\u5934\u6587\u4ef6)"),(0,a.kt)("h4",r({},{id:"\u5305"}),"\u5305"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5728\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"li"},"cargo"),"\u7684\u65f6\u5019, \u751f\u6210\u51fa\u6765\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"src")," \u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5305")),(0,a.kt)("h4",r({},{id:"\u6a21\u5757-mod"}),"\u6a21\u5757 ",(0,a.kt)("inlineCode",{parentName:"h4"},"mod")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6837\u677f"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"mod front_of_house {\n    // \u5982\u679c\u8fd9\u91cc\u4e0d\u6dfb\u52a0 pub \u7684\u8bdd \u662f\u6ca1\u6709\u529e\u6cd5\u5728\u5916\u90e8\u4f7f\u7528\u7684\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n        fn seat_at_table() {}\n    }\n\n    mod serving {\n        fn take_order() {}\n        fn serve_order() {}\n        fn take_payment() {}\n    }\n}\n")))),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{}),"pub fn eat_at_restaurant() {\n    // \u7edd\u5bf9\u8def\u5f84\u8c03\u7528\u7684\u65f6\u5019 \u91c7\u7528\u7684\u5173\u952e\u5b57\u662f crate \u7bb1\u5b50 \u5176\u5b9e\u53ef\u4ee5\u7406\u89e3\u4e3a\u5f53\u524d\u76ee\u5f55 root\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // \u76f8\u5bf9\u8def\u5f84\u8c03\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u7701\u7565\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n")),(0,a.kt)("ol",r({},{start:2}),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6a21\u5757\u6811"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"crate\n\u2514\u2500\u2500 front_of_house\n    \u251c\u2500\u2500 hosting\n    \u2502   \u251c\u2500\u2500 add_to_waitlist\n    \u2502   \u2514\u2500\u2500 seat_at_table\n    \u2514\u2500\u2500 serving\n        \u251c\u2500\u2500 take_order\n        \u251c\u2500\u2500 serve_order\n        \u2514\u2500\u2500 take_payment\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u8d77\u59cb\u76f8\u5bf9\u8def\u5f84 ",(0,a.kt)("inlineCode",{parentName:"p"},"super")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn serve_order() {}\n\nmod back_of_house {\n    fn fix_incorrect_order() {\n        cook_order();\n        // \u8fd9\u91cc\u7684super\u610f\u601d\u5c31\u662f back_of_house \u800c\u4e14 serve_order \u548c super \u540c\u7ea7\n        super::serve_order();\n    }\n\n    fn cook_order() {}\n}\nfn main() {}\n\n")))),(0,a.kt)("h4",r({},{id:"\u4f7f\u7528-use-\u6765\u5f15\u5165\u8def\u5f84-\u7f29\u77ed\u8def\u5f84"}),"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"h4"},"use")," \u6765\u5f15\u5165\u8def\u5f84 \u7f29\u77ed\u8def\u5f84"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6b63\u5e38\u4f7f\u7528"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"mod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    // \u7edd\u5bf9\u8def\u5f84\u4e0b\n    crate::front_of_house::hosting::add_to_waitlist();\n    // \u76f8\u5bf9\u8def\u5f84\u4e0b\n    front_of_house::hosting::add_to_waitlist();\n    // \u88ab\u7f29\u77ed\u7684\u4f7f\u7528\u65b9\u5f0f\n    hosting::add_to_waitlist();\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"as")," \u6765\u91cd\u5199\u547d\u540d"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn main() {\n    use std::fmt::Result;\n    use std::io::Result as IoResult;\n\n    fn function1() -> Result {\n        // --snip--\n        Ok(())\n    }\n\n    fn function2() -> IoResult<()> {\n        // --snip--\n        Ok(())\n    }\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5bfc\u51fa ",(0,a.kt)("inlineCode",{parentName:"p"},"pub use")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"mod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n// \u5916\u90e8\u8bbf\u95ee\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee hosting::add_to_waitlist()\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\nfn main() {}\n\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5bf9\u4e8e\u540c\u4e00\u5305\u4e0b\u7684\u591a\u4e2a\u8def\u5f84\u4f7f\u7528\u5d4c\u5957\u5904\u7406 ",(0,a.kt)("inlineCode",{parentName:"p"},"{ , }")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"use std::io;\nuse std::io::Write;\nuse std::cmp::Ordering;\n\nuse std::{cmp::Ordering, io};\n// \u5bf9\u4e8e\u8def\u5f84\u672c\u8eab \u4f7f\u7528 self\nuse std::io::{self, Write};\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5bfc\u5165\u6240\u6709\u7684\u516c\u5171\u9879\u76ee"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"use std::collections::*;\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6a21\u5757 ",(0,a.kt)("inlineCode",{parentName:"p"},"mod")," \u5206\u6587\u4ef6\u5b58\u653e"),(0,a.kt)("p",{parentName:"li"},"\u8fd9\u4e2a\u4e0d\u9700\u8981\u592a\u591a\u7684\u5185\u5bb9\u53bb\u5199 \u5927\u6982\u5c31\u662f\u548c\u5b89\u5353\u7684\u673a\u5236\u7c7b\u4f3c \u6587\u4ef6\u5939\u5b58\u653e\u5373\u53ef"))),(0,a.kt)("h3",r({},{id:"\u5e38\u7528\u7684\u4e00\u4e9b\u952e\u503c\u4fdd\u5b58\u7684\u4e1c\u897f"}),"\u5e38\u7528\u7684\u4e00\u4e9b\u952e\u503c\u4fdd\u5b58\u7684\u4e1c\u897f"),(0,a.kt)("h4",r({},{id:"\u77e2\u91cf"}),"\u77e2\u91cf"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u77e2\u91cf ",(0,a.kt)("inlineCode",{parentName:"p"},"Vec")," \u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b, \u4f46\u4ec5\u9650\u4e8e\u540c\u4e00\u7c7b\u578b\u7684, \u6240\u4ee5\u53ef\u4ee5\u501f\u52a9 ",(0,a.kt)("inlineCode",{parentName:"p"},"enum")," \u6765\u8fbe\u5230\u6df7\u5b58\u7684\u529f\u80fd"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let v: Vec<i32> = Vec::new();\nv.push(5);\nv.push(6);\nlet v = vec![1, 2, 3];\n\nenum SpreadsheetCell {\n    Int(i32),\n    Float(f64),\n    Text(String),\n}\n\nlet row = vec![\n    SpreadsheetCell::Int(3),\n    SpreadsheetCell::Text(String::from("blue")),\n    SpreadsheetCell::Float(10.12),\n];\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5982\u679c\u5df2\u7ecf\u751f\u6210\u8fc7\u4e86\u4e2a \u4e0d\u53ef\u53d8 \u7684\u5f15\u7528\u4e4b\u540e, \u518d\u7ee7\u7eed\u5bf9\u5176push"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let mut v = vec![1, 2, 3, 4, 5];\nlet first = &v[0];  // \u4ea7\u751f\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\u4e4b\u540e\nv.push(6);          // \u8fd9\u91cc\u4f1a\u751f\u6210 \u53ef\u53d8\nprintln!("The first element is: {}", first);\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5176\u904d\u5386"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let v = vec![100, 32, 57];\nfor i in &v {\n    println!("{}", i);\n}\n// \u5982\u679c\u8981\u6539\u503c\u5f97\u8bdd \u9700\u8981\u52a0 mut\nfor i in &mut v {\n    // \u751a\u81f3\u662f\u76f4\u63a5\u904d\u5386\u7684\u65f6\u5019\u66f4\u6539\u4ed6\u7684\u503c\n    *i += 50; // * \u6709\u70b9\u5f3a\u4e70\u5f3a\u5356\u7684\u95ee\u9053\n}\n')))),(0,a.kt)("h4",r({},{id:"string"}),"String"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e0d\u80fd\u5bf9 ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," \u7d22\u5f15"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let hello = "\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435";\nlet answer = &hello[0]; // \u56e0\u4e3aUnicode\u5417\u7684\u5b57\u8282\u957f\u5ea6\u662f\u4e0d\u5b9a\u7684\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b57\u7b26\u4e32\u7684\u4e00\u4e9b\u76f8\u5173\u64cd\u4f5c"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'// \u8ffd\u52a0\nlet mut s1 = String::from("foo");\nlet s2 = "bar";\ns1.push_str(s2); // \u8fd9\u91cc\u5e76\u4e0d\u4f1a\u8f6c\u8ba9\u6240\u6709\u6743\nprintln!("s2 is {}", s2);\n\nlet mut s = String::from("lo");\ns.push(\'l\');\n\n// \u5408\u5e76\n// \u52a0\u53f7\nlet s1 = String::from("Hello, ");\nlet s2 = String::from("world!");\nlet s3 = s1 + &s2; // s1 \u7684\u6240\u6709\u6743\u88ab\u79fb\u4ea4\u51fa\u53bb\u4e86 + \u53f7\u5176\u5b9e\u8c03\u7528\u7684\u662f add \u65b9\u6cd5\n\n// \u683c\u5f0f\u5316\nlet s1 = String::from("tic");\nlet s2 = String::from("tac");\nlet s3 = String::from("toe");\nlet s = format!("{}-{}-{}", s1, s2, s3);\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f46\u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u505a\u8303\u56f4\u5207\u7247 \u4f46\u662f\u4f1a\u53ef\u80fd\u62a5\u9519"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\"; // \u8fd9\u91cc\u7684\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\nlet s = &hello[0..4];       // \u6240\u4ee5 0\u52304 \u53d6\u51fa\u6765\u7684\u662f '\u0417\u0434'\n// \u4e00\u65e6\u53d6\u4e86 [0..1] \u6216\u8005\u662f [0..3] \u5c31\u4f1a\u5bfc\u81f4\u5b57\u7b26\u65e0\u6cd5\u88ab\u6b63\u5e38\u5207\u51fa\u6765 \u4f1a\u62a5\u9519\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u904d\u5386\u5b57\u7b26\u4e32\u7684\u771f\u6b63\u5b57\u7b26 \u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"chars")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'for c in "\u0928\u092e\u0938\u094d\u0924\u0947".chars() {\n    println!("{}", c);\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6216\u8005\u904d\u5386\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u7801 \u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'for b in "\u0928\u092e\u0938\u094d\u0924\u0947".bytes() {\n    println!("{}", b);\n}\n')))),(0,a.kt)("h4",r({},{id:"hashmap"}),"HashMap"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u6240\u6709\u7684\u952e\u503c\u5fc5\u987b\u4e00\u81f4, \u4e5f\u5c31\u662f\u952e\u7684\u7c7b\u578b\u8981\u4e00\u81f4, \u503c\u7684\u7c7b\u578b\u4e5f\u8981\u4e00\u81f4")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f7f\u7528"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::collections::HashMap;\n\nlet mut scores = HashMap::new();\n// \u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\nscores.insert(String::from("Blue"), 10);\nscores.insert(String::from("Yellow"), 50);\n\n// \u5148\u521b\u5efa\u6240\u6709\u7684\u952e \u548c \u503c \u5b58\u653e\u5230 vec\u5f53\u4e2d\nlet teams  = vec![String::from("Blue"), String::from("Yellow")];\nlet initial_scores = vec![10, 50];\n\n// \u8fd9\u91cc\u7684 \u4e0b\u5212\u7ebf\u662f\u53ef\u4ee5\u7f16\u8bd1\u5668 \u81ea\u5df1\u53bb\u731c\u6d4b\u7684\nlet scores: HashMap<_, _> = teams.iter().zip(initial_scores.iter()).collect();\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f1a\u63a5\u6536\u6240\u6709\u6743"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let field_name = String::from("Favorite color");\nlet field_value = String::from("Blue");\n\nlet mut map = HashMap::new();\nmap.insert(field_name, field_value);\n// \u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4f1a\u62a5\u9519\u7684 \u6240\u6709\u6743\u5931\u6548\u4e86\nprintln!("{}, {}", field_name, field_value);\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u83b7\u53d6\u503c ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," \u8fd4\u56de\u7684\u662f\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"Option")," \u503c \u56e0\u4e3a\u662f\u6709\u53ef\u80fd\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),"\u7684"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'scores.insert(String::from("Blue"), 10);\nscores.insert(String::from("Yellow"), 50);\n\nlet team_name = String::from("Blue");\nlet score = scores.get(&team_name);\n// score => Some(10)\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4ec5\u5f53\u952e\u6ca1\u6709\u503c\u65f6\u624d\u63d2\u5165\u503c ",(0,a.kt)("inlineCode",{parentName:"p"},"entry")," ",(0,a.kt)("inlineCode",{parentName:"p"},"or_insert")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let mut scores = HashMap::new();\nscores.insert(String::from("Blue"), 10);\n\nscores.entry(String::from("Yellow")).or_insert(50);\nscores.entry(String::from("Blue")).or_insert(50);   // \u8fd9\u91cc\u4e0d\u4f1a\u751f\u6548\n\nprintln!("{:?}", scores);\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u66f4\u65b0\u503c \u4f46\u8fd9\u91cc\u611f\u89c9\u6709\u70b9\u95ee\u9898"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'let text = "hello world wonderful world";\n\nlet mut map = HashMap::new();\n\nfor word in text.split_whitespace() {\n    let count = map.entry(word).or_insert(0);\n    *count += 1; // \u5728\u8fd9\u91cc\u66f4\u65b0\u4e86 \u4f46\u662f\u5c31\u600e\u4e48\u90a3\u4e48\u602a\u5462\n}\n\nprintln!("{:?}", map);\n')))),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{}),'// \u5982\u679c\u6309\u7167\u4e0a\u8ff0\u8fd9\u4e2a\u601d\u8def\u7684\u8bdd\nlet score = scores.entry(String::from("Blue")).or_insert(1);\n*score += 1;\n```\n')),(0,a.kt)("h3",r({},{id:"\u62a5\u9519-panic"}),"\u62a5\u9519 ",(0,a.kt)("inlineCode",{parentName:"h3"},"panic!")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5173\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"panic!"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Result")),(0,a.kt)("p",{parentName:"li"},"\u8fd9\u662f\u4e00\u4e2a\u679a\u4e3e, \u8868\u793a\u8fd9\u4e2a\u503c\u53ef\u4ee5\u662f\u6709\u4e24\u79cd\u7ed3\u679c, \u5982\u679c\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"OK"),"\u4f1a\u9644\u5e26\u5bf9\u5e94\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"<T>"),"\u7c7b\u578b, \u5982\u679c\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),"\u7684\u8bdd, \u5c06\u4f1a\u662f\u62a5\u9519"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\nuse std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt");\n\n    let f = match f {\n        Ok(file) => file,\n        Err(error) => {\n            // \u8fd9\u91cc\u7684 panic! \u8868\u793a\u4f1a\u76f4\u63a5\u505c\u6b62\u5728\u8fd9\u91cc\n            panic!("Problem opening the file: {:?}", error)\n        },\n    };\n}\n\n// \u751a\u81f3\u53ef\u4ee5\u5339\u914d\u4e0d\u540c\u7684\u9519\u8bef \u4e5f\u5c31\u662f\u9488\u5bf9 err \u7684\u9519\u8bef\u7c7b\u578b\u505a\u6587\u7ae0\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open("hello.txt");\n\n    let f = match f {\n        Ok(file) => file,\n        Err(error) => match error.kind() {\n            ErrorKind::NotFound => match File::create("hello.txt") {\n                Ok(fc) => fc,\n                Err(e) => panic!("Problem creating the file: {:?}", e),\n            },\n            other_error => panic!("Problem opening the file: {:?}", other_error),\n        },\n    };\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u95ed\u5305"),(0,a.kt)("p",{parentName:"li"},"\u5982\u679c\u5728\u4f7f\u7528\u591a\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"match"),"\u4f1a\u4f7f\u5f97\u4ee3\u7801\u770b\u8d77\u6765\u5f88\u539f\u59cb"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open("hello.txt").unwrap_or_else(|error| {\n        if error.kind() == ErrorKind::NotFound {\n            File::create("hello.txt").unwrap_or_else(|error| {\n                panic!("Problem creating the file: {:?}", error);\n            })\n        } else {\n            panic!("Problem opening the file: {:?}", error);\n        }\n    });\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u65b0\u7684\u5173\u952e\u5b57\u7528\u6765\u5355\u72ec\u89e3\u51b3\u62a5\u9519 ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"expect")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt").unwrap();   // \u5982\u679c\u62a5\u9519 \u4f1a\u76f4\u63a5\u4e2d\u65ad\u5728\u8fd9\u91cc\n}\n\nfn main() {\n    let f = File::open("hello.txt").expect("Failed to open hello.txt"); // \u5982\u679c\u62a5\u9519 \u4f1a\u76f4\u63a5\u663e\u793a\u9519\u8bef\u4fe1\u606f \u5e76\u4e14\u4e2d\u65ad\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f20\u9012\u62a5\u9519"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'fn main() {\n    use std::io;\n    use std::io::Read;\n    use std::fs::File;\n\n    // \u9996\u5148\u770b\u8fd4\u56de\u503c \u662f\u4e2a Result\n    fn read_username_from_file() -> Result<String, io::Error> {\n        let f = File::open("hello.txt");\n        // \u5224\u65ad f \u662f\u5426\u662f\u9519\u8bef \u5982\u679c\u662f\u7684\u8bdd\u76f4\u63a5\u8fd4\u56de\u62a5\u9519 \u5426\u5219\u76f4\u63a5\u8d4b\u503c\u4e3a\u6587\u4ef6\u7684 \u53e5\u67c4\n        let mut f = match f {\n            Ok(file) => file,\n            Err(e) => return Err(e),\n        };\n\n        let mut s = String::new();\n\n        // \u5339\u914d\u6587\u4ef6\u8bfb\u51fa\u6765\u7684\u5185\u5bb9\u7ed9\u5230 \u65b0\u5efa\u7684 s \u5f53\u4e2d\u53bb\n        match f.read_to_string(&mut s) {\n            Ok(_) => Ok(s),\n            Err(e) => Err(e),\n        }   // \u8fd9\u91cc\u6ca1\u6709 ; \u8868\u793a\u8fd9\u91cc\u5c31\u662f\u8fd4\u56de\u503c\u4e86\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7531\u4e8e\u4ee5\u4e0a\u4f20\u9012 \u975e\u5e38\u5e38\u89c1 \u5bfc\u81f4\u53ef\u4ee5 \u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," \u4f7f\u5176\u7cbe\u7b80 "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut f = File::open("hello.txt")?;\n    let mut s = String::new();\n    f.read_to_string(&mut s)?;\n    Ok(s)\n}\n')),(0,a.kt)("p",{parentName:"li"},"\u8be5",(0,a.kt)("inlineCode",{parentName:"p"},"?"),"\u653e\u5728\u540e",(0,a.kt)("inlineCode",{parentName:"p"},"Result"),"\u503c\u5b9a\u4e49\u4e3a\u5de5\u4f5c\u5728\u51e0\u4e4e\u76f8\u540c\u7684\u65b9\u5f0f",(0,a.kt)("inlineCode",{parentName:"p"},"match"),"\u8868\u8fbe\u6211\u4eec\u5b9a\u4e49\u6765\u5904\u7406",(0,a.kt)("inlineCode",{parentName:"p"},"Result"),"\n\u4e5f\u5c31\u662f\u53ef\u4ee5\u76f4\u63a5\u505a\u5230\u7b80\u5316\u8fd4\u56de\u64cd\u4f5c\u7684\u80fd\u529b\n\u751a\u81f3\u66f4\u52a0\u7684\u7cbe\u7b80"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut s = String::new();\n    File::open("hello.txt")?.read_to_string(&mut s)?;\n    Ok(s)\n}\n')),(0,a.kt)("p",{parentName:"li"},"\u597d\u5427 \u5176\u5b9e\u8fd8\u53ef\u4ee5\u8d85\u7ea7\u7cbe\u7b80"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::io;\nuse std::fs;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    // \u6211\u89c9\u5f97\u8fd9\u91cc\u5df2\u7ecf\u766b\u4e86 \u76f4\u63a5\u5e2e\u4f60\u5199\u597d\u4e86 \u6253\u5f00\u6587\u4ef6\u5939\u5e76\u4e14\u83b7\u53d6\u5185\u5bb9 \u5e76\u4e14\u8fd4\u56de\u51fa\u53bb...\n    fs::read_to_string("hello.txt")\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u90a3\u4e48\u8fd9\u4e2a",(0,a.kt)("inlineCode",{parentName:"p"},"?"),"\u80fd\u7528\u5728\u522b\u7684\u5730\u65b9\u5417? \u4e0d\u80fd\u7684 \u53ea\u80fd\u7528\u5728\u8fd4\u56de\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," \u7684\u51fd\u6570\u4e0a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'// \u9519\u8bef\u4ee3\u7801\n\nuse std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt")?;\n}\n')),(0,a.kt)("p",{parentName:"li"},"\u8fd9\u91cc\u8bf4\u4e00\u5634 ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"()")," \u6211\u5b8c\u5168\u4e0d\u77e5\u9053\u8fd9\u662f\u4e2a\u4ec0\u4e48\u7c7b\u578b..."),(0,a.kt)("p",{parentName:"li"},"\u4f46\u4f60\u53ef\u4ee5\u8fd9\u4e48\u5199"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::error::Error;\nuse std::fs::File;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let f = File::open("hello.txt")?;\n    // \u8fd4\u56de\u4e86 () \u7684\u540c\u65f6 \u8036 \u5b8c\u6210\u4e86 ?\n    Ok(())\n}\n')),(0,a.kt)("p",{parentName:"li"},"\u4f46\u8fd9\u91cc\u51fa\u73b0\u4e86\u4e2a\u65b0\u7684\u73a9\u610f ",(0,a.kt)("inlineCode",{parentName:"p"},"Box<dyn Error>")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Box")," \u770b\u4e86\u6587\u6863\u4e0d\u662f\u5f88\u61c2 ",(0,a.kt)("inlineCode",{parentName:"p"},"pub struct Box<T: ?Sized>(Unique<T>);"),"\n\u4f46 ",(0,a.kt)("inlineCode",{parentName:"p"},"dyn")," \u8868\u793a\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\n\u6240\u4ee5 ",(0,a.kt)("inlineCode",{parentName:"p"},"Box<dyn Error>")," \u53ef\u4ee5\u7406\u89e3\u4e3a \u4efb\u4f55\u7c7b\u578b\u7684\u9519\u8bef"))),(0,a.kt)("h3",r({},{id:"\u6cdb\u578b-\u7279\u5f81-\u548c-\u751f\u547d\u5468\u671f"}),"\u6cdb\u578b \u7279\u5f81 \u548c \u751f\u547d\u5468\u671f"),(0,a.kt)("h4",r({},{id:"\u7279\u5f81"}),"\u7279\u5f81"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b9a\u4e49\u5171\u540c\u63a5\u53e3"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'pub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\n// \u5b9e\u73b0\u63a5\u53e3 \u5bf9\u4e8e NewsArticle \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6765\u8bf4\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!("{}, by {} ({})", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\n// \u5b9e\u73b0\u63a5\u53e3 \u5bf9\u4e8e Tweet \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6765\u8bf4\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!("{}: {}", self.username, self.content)\n    }\n}\n\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e0d\u80fd\u5b9e\u73b0\u5916\u90e8\u7279\u5f81, \u53ea\u80fd\u672c\u5730\u4f7f\u7528")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u53ef\u4ee5\u9ed8\u8ba4\u5b9e\u73b0\u7279\u5f81, \u8fd9\u6837\u672c\u5730\u5c31\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e86")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7279\u5f81\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570, \u4e5f\u5c31\u662f\u5fc5\u987b\u5b9e\u73b0\u8fd9\u4e2a\u7279\u5f81\u7684\u4efb\u610f\u7c7b\u578b"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'// \u5355\u72ec\u4f7f\u7528\npub fn notify(item: impl Summary) {\n    println!("Breaking news! {}", item.summarize());\n}\n\n// \u63d0\u53d6\u51fa\u6765\u4f7f\u7528\npub fn notify<T: Summary>(item: T) {\n    println!("Breaking news! {}", item.summarize());\n}\n\n// \u6b63\u5e38\u5355\u72ec\u4f7f\u7528\u591a\u4e2a\npub fn notify(item1: impl Summary, item2: impl Summary) {\n\n}\n\n// \u4f46\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\npub fn notify<T: Summary>(item1: T, item2: T) {\n\n}\n\n// \u53ef\u4ee5\u76f8\u52a0\npub fn notify(item: impl Summary + Display) {\n\n}\n\n// \u5f53\u7136\u4e5f\u53ef\u4ee5\u63d0\u53d6\u51fa\u6765\npub fn notify<T: Summary + Display>(item: T) {\n\n}\n\n// \u4f46\u5982\u679c\u6709\u591a\u4e2a\u7684\u65f6\u5019 \u5c31\u4f1a\u5f88\u4e71\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: T, u: U) -> i32 {\n\n}\n\n// \u53ef\u4ee5\u4f7f\u7528 where \u6765\u540e\u7eed\u8865\u5145\u8bf4\u660e\nfn some_function<T, U>(t: T, u: U) -> i32\n    where T: Display + Clone,\n        U: Clone + Debug\n{\n\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u65e2\u7136\u80fd\u505a\u53c2\u6570, \u90a3\u4e48\u4e5f\u80fd\u505a\u8fd4\u56de\u503c"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'fn returns_summarizable() -> impl Summary {\n    Tweet {\n        username: String::from("horse_ebooks"),\n        content: String::from("of course, as you probably already know, people"),\n        reply: false,\n        retweet: false,\n    }\n}\n\n// \u4f46\u6709\u5c40\u9650\u6027 \u4e5f\u5c31\u662f\u8bf4 \u8fd9\u6837\u662f\u4e0d\u5141\u8bb8\u7684 \u53ea\u5141\u8bb8\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\nfn returns_summarizable(switch: bool) -> impl Summary {\n    if switch {\n        NewsArticle {\n            // ...\n        }\n    } else {\n        Tweet {\n            // ...\n        }\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5b8c\u6210\u4e4b\u524d\u7684\u6bd4\u5927\u5c0f"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"// PartialOrd \u53ef\u4ee5\u6bd4\u8f83 Copy \u53ef\u4ee5\u8fdb\u884c\u62f7\u8d1d \u4ee3\u8868\u5c31\u662f\u5728\u5806\u4e0a\u7684\u503c\nfn largest<T: PartialOrd + Copy>(list: &[T]) -> T {\n    let mut largest = list[0];\n\n    for &item in list.iter() {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n")))),(0,a.kt)("h4",r({},{id:"lifetime-\u5bff\u547d"}),(0,a.kt)("inlineCode",{parentName:"h4"},"lifetime")," \u5bff\u547d"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e09\u6761\u89c4\u5219"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f5c\u4e3a\u5f15\u7528\u7684\u53c2\u6570\u90fd\u6709\u5176\u81ea\u5df1\u7684\u5bff\u547d ",(0,a.kt)("inlineCode",{parentName:"p"},"fn foo<'a, 'b>(x: &'a i32, y: &'b i32);"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6709\u8f93\u5165\u5bff\u547d\u7684\u53c2\u6570\u7684\u65f6\u5019, \u90a3\u4e48\u8fd4\u56de\u7684\u4e5f\u5f97\u662f\u8fd9\u4e2a\u5e26\u6709\u5bff\u547d\u7684\u53c2\u6570")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5982\u679c\u6709\u591a\u4e2a\u4e0d\u540c\u5bff\u547d\u53c2\u6570, \u4f46\u5176\u4e2d\u6709\u7684\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"&self")," \u6216\u8005\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"&mut self"),", \u90a3\u4e48\u5c31\u628a ",(0,a.kt)("inlineCode",{parentName:"p"},"self")," \u5206\u914d\u7ed9\u6240\u6709\u8f93\u51fa\u5bff\u547d\u53c2\u6570???"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"// \u5206\u6790 1\nfn first_word(s: &str) -> &str {\n// \u7531\u4e8e\u6ca1\u6709\u6307\u5b9a \u90a3\u4e48\u5c31\u7b97\u662f \u5148\u6267\u884c\u7b2c\u4e00\u6761\u89c4\u5219 \u7ed9\u6240\u6709\u7684\u5f15\u7528\u53c2\u6570\u6307\u5b9a\u5bff\u547d\nfn first_word(s: &'a str) -> &str {\n// \u53c8\u53ea\u6709\u4e00\u4e2a\u5bff\u547d\u7c7b\u578b, \u90a3\u4e48\u628a\u8f93\u5165\u7684\u5bff\u547d\u7ed9\u5230\u8f93\u51fa\nfn first_word(s: &'a str) -> &'a str {\n// \u90a3\u4e48\u73b0\u5728\uff0c\u6b64\u51fd\u6570\u6240\u6709\u5f15\u7528\u90fd\u5177\u6709\u5bff\u547d\uff0c\u5e76\u4e14\u7f16\u8bd1\u5668\u53ef\u4ee5\u7ee7\u7eed\u8fdb\u884c\u5206\u6790\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4e0d\u7528\u7f16\u5199\u8fd9\u4e2a\u5bff\u547d\u4e86\n")))))),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{}),"// \u5206\u6790 2\nfn longest(x: &str, y: &str) -> &str {\n// \u7531\u4e8e\u6ca1\u6709\u6307\u5b9a \u5165\u53c2\u7684\u5bff\u547d \u6240\u4ee5\u5148\u6267\u884c\u7b2c\u4e00\u6761\u89c4\u5219\nfn longest(x: &'a str, y: &'b str) -> &str {\n// \u7b2c\u4e8c\u6761\u89c4\u5219\u9002\u7528? \u7531\u4e8e\u6709\u591a\u4e2a\u4e0d\u9002\u7528\n// \u7b2c\u4e09\u6761\u89c4\u5219\u5462? \u6ca1\u6709 self \u4e5f\u4e0d\u9002\u7528\n// \u6240\u4ee5\u8fd9\u4e2a\u7f16\u8bd1\u7684\u65f6\u5019 \u5c31\u4f1a\u62a5\u9519\n```\n")),(0,a.kt)("h3",r({},{id:"\u81ea\u52a8\u5316\u6d4b\u8bd5"}),"\u81ea\u52a8\u5316\u6d4b\u8bd5"),(0,a.kt)("h3",r({},{id:"\u6784\u5efa\u547d\u4ee4\u884c\u7a0b\u5e8f"}),"\u6784\u5efa\u547d\u4ee4\u884c\u7a0b\u5e8f"),(0,a.kt)("h3",r({},{id:"\u95ed\u5305\u548c\u8fed\u4ee3\u5668"}),"\u95ed\u5305\u548c\u8fed\u4ee3\u5668"),(0,a.kt)("h4",r({},{id:"\u95ed\u5305"}),"\u95ed\u5305"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u53ef\u4ee5\u4e0d\u6307\u5b9a\u6570\u636e\u7c7b\u578b, \u4f46\u4f7f\u7528\u7684\u65f6\u5019 \u4e0d\u80fd\u4e71\u7528, \u4ed6\u4e0d\u662f\u6cdb\u578b"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn  add_one_v1   (x: u32) -> u32 { x + 1 }  // \u51fd\u6570 \u5b8c\u6574\u7248\nlet add_one_v2 = |x: u32| -> u32 { x + 1 }; // \u95ed\u5305 \u5b8c\u6574\u7248\nlet add_one_v3 = |x|             { x + 1 }; // \u95ed\u5305 \u5220\u9664\u6307\u5b9a\u6570\u636e\u7c7b\u578b\nlet add_one_v4 = |x|               x + 1  ; // \u95ed\u5305 \u5220\u9664\u82b1\u62ec\u53f7\n")))),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{}),'// \u4f46\u5728\u4f7f\u7528\u540e\u4e0a\nlet example_closure = |x| x;\n\nlet s = example_closure(String::from("hello")); // \u4f7f\u7528\u4e86\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\nlet n = example_closure(5);                     // \u53c8\u4f7f\u7528\u4e86 \u6570\u5b57  \u8fd9\u91cc\u4f1a\u5d29\n```\n')),(0,a.kt)("ol",r({},{start:2}),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u95ed\u5305\u4e5f\u662f\u6709\u7279\u5f81\u7684, \u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u6cdb\u578b\u7684\u53c2\u6570\u4f20\u5165\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"Fn")," ",(0,a.kt)("inlineCode",{parentName:"p"},"FnMut")," ",(0,a.kt)("inlineCode",{parentName:"p"},"FnOnce")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"struct Cacher<T>\n    where T: Fn(u32) -> u32\n{\n    calculation: T,\n    value: Option<u32>,\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u95ed\u5305\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u7684\u53d8\u91cf"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"fn main() {\n    let x = 4;\n\n    let equal_to_x = |z| z == x;    // \u4f7f\u7528\u4e86 x\n    // fn equal_to_x(z: i32) -> bool { z == x } //\u8fd9\u4e2a\u5c31\u4f1a\u5d29\n\n    let y = 4;\n\n    assert!(equal_to_x(y));\n}\n")),(0,a.kt)("p",{parentName:"li"},"\u6240\u4ee5\u8bf4\u95ed\u5305\u662f\u4f1a\u5f3a\u5236\u83b7\u53d6\u6240\u6709\u6743\u7684\n",(0,a.kt)("inlineCode",{parentName:"p"},"FnOnce"),"    \u83b7\u53d6\u5b8c\u540e \u4f46\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\n",(0,a.kt)("inlineCode",{parentName:"p"},"FnMut"),"     \u53ef\u53d8\u7684\u5f62\u5f0f\u83b7\u53d6\u4e86\u503c\n",(0,a.kt)("inlineCode",{parentName:"p"},"Fn"),"        \u4e0d\u53ef\u53d8\u7684\u5f62\u5f0f\u83b7\u53d6\u4e86\u503c"))),(0,a.kt)("h4",r({},{id:"\u8fed\u4ee3\u5668"}),"\u8fed\u4ee3\u5668"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7279\u5f81\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"Iterator")," \u548c \u5177\u6709 ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," \u65b9\u6cd5"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"pub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"next")," \u662f\u4f1a\u6d88\u8017\u6389\u7684"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"#[test]\nfn iterator_demonstration() {\n    let v1 = vec![1, 2, 3];\n\n    let mut v1_iter = v1.iter();\n\n    assert_eq!(v1_iter.next(), Some(&1));\n    assert_eq!(v1_iter.next(), Some(&2));\n    assert_eq!(v1_iter.next(), Some(&3));\n    assert_eq!(v1_iter.next(), None);\n}\n\nfn iterator_sum() {\n    let v1 = vec![1, 2, 3];\n    let v1_iter = v1.iter();\n    let total: i32 = v1_iter.sum();\n    assert_eq!(total, 6);\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u8fed\u4ee3\u5668\u662f\u4e0d\u4f1a\u81ea\u5df1\u8c03\u7528\u7684"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),"let v1: Vec<i32> = vec![1, 2, 3];\n\nv1.iter().map(|x| x + 1);   // \u8fd9\u4e48\u4f7f\u7528\u65f6\u4f1a\u6536\u5230\u8b66\u544a \u8bf4\u660e\u8fd9\u884c\u4ee3\u7801\u6ca1\u6709\u8d77\u5230\u4efb\u4f55\u4f5c\u7528\n\nlet v2: Vec<_> = v1.iter().map(|x| x + 1).collect();    // \u76f4\u63a5\u8fdb\u884c\u8fed\u4ee3\n\nassert_eq!(v2, vec![2, 3, 4]);\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f7f\u7528\u573a\u666f"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'#![allow(unused_variables)]\nfn main() {\n#[derive(PartialEq, Debug)]\nstruct Shoe {\n    size: u32,\n    style: String,\n}\n\nfn shoes_in_my_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {\n    shoes.into_iter()\n        .filter(|s| s.size == shoe_size)\n        .collect()\n}\n\n#[test]\nfn filters_by_size() {\n    let shoes = vec![\n        Shoe { size: 10, style: String::from("sneaker") },\n        Shoe { size: 13, style: String::from("sandal") },\n        Shoe { size: 10, style: String::from("boot") },\n    ];\n\n    let in_my_size = shoes_in_my_size(shoes, 10);\n\n    assert_eq!(\n        in_my_size,\n        vec![\n            Shoe { size: 10, style: String::from("sneaker") },\n            Shoe { size: 10, style: String::from("boot") },\n        ]\n    );\n}\n}\n')))),(0,a.kt)("h3",r({},{id:"cratesio"}),"Crates.io"),(0,a.kt)("h3",r({},{id:"\u667a\u80fd\u6307\u9488"}),"\u667a\u80fd\u6307\u9488"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Rc<T>")," \u5141\u8bb8\u5bf9\u4e00\u4e2a\u53d8\u91cf\u6709\u591a\u4e2a\u6240\u6709\u8005\uff1b",(0,a.kt)("inlineCode",{parentName:"li"},"Box<T>")," \u548c ",(0,a.kt)("inlineCode",{parentName:"li"},"RefCell<T>")," \u53ea\u80fd\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Box<T>")," \u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u662f\u4e0d\u53ef\u53d8\u8fd8\u662f\u53ef\u53d8\u7684\uff1b",(0,a.kt)("inlineCode",{parentName:"li"},"Rc<T>")," \u53ea\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\uff1b",(0,a.kt)("inlineCode",{parentName:"li"},"RefCell<T>")," \u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u4e0d\u53ef\u53d8\u6216\u53ef\u53d8\u7684\u5f15\u7528\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u7531\u4e8e",(0,a.kt)("inlineCode",{parentName:"li"},"RefCell<T>"),"\u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u53ef\u53d8\u5f15\u7528\uff0c\u56e0\u6b64 ",(0,a.kt)("inlineCode",{parentName:"li"},"RefCell<T>")," \u5373\u4f7f",(0,a.kt)("inlineCode",{parentName:"li"},"RefCell<T>")," \u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e5f\u53ef\u4ee5\u5728\u5185\u90e8\u6539\u53d8\u503c\u3002")),(0,a.kt)("h3",r({},{id:"\u5e76\u53d1"}),"\u5e76\u53d1"),(0,a.kt)("h4",r({},{id:"\u7ebf\u7a0b"}),"\u7ebf\u7a0b"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u521b\u5efa\u7ebf\u7a0b ",(0,a.kt)("inlineCode",{parentName:"p"},"thread::spawn"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7b49\u5f85\u8be5\u7ebf\u7a0b\u8dd1\u5b8c ",(0,a.kt)("inlineCode",{parentName:"p"},"join")," \u963b\u585e\u7684")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u7ebf\u7a0b\u5185\u4f7f\u7528\u5916\u90e8\u7684\u503c \u5176\u5b9e\u4e5f\u53ef\u4ee5\u770b\u505a\u662f \u95ed\u5305\u5185\u4f7f\u7528\u5916\u90e8\u53d8\u91cf \u4f46\u95ed\u5305\u662f\u5728\u5355\u4e00\u7ebf\u7a0b\u4e0b\u4f7f\u7528\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"move")," \u662f\u9488\u5bf9\u7ebf\u7a0b\u95ed\u5305\u7684 \u6240\u4ee5 \u4f1a\u5f3a\u5236\u83b7\u53d6\u6240\u6709\u6743"))),(0,a.kt)("h4",r({},{id:"\u901a\u9053"}),"\u901a\u9053"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4f8b\u5b50"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from("hi");\n        tx.send(val).unwrap();  // \u79fb\u4ea4\u6240\u6709\u6743\n    });\n\n    let received = rx.recv().unwrap();\n    println!("Got: {}", received);\n}\n')))),(0,a.kt)("h4",r({},{id:"\u4e0a\u9501"}),"\u4e0a\u9501"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e92\u65a5 \u548c \u539f\u5b50\u5f15\u7528\u8ba1\u6570"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",r({parentName:"pre"},{className:"language-rust"}),'use std::sync::{Mutex, Arc};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Arc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!("Result: {}", *counter.lock().unwrap());\n}\n')))))}k.isMDXComponent=!0}}]);