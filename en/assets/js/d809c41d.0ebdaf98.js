"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[93411],{35318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var a=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),g=i,u=m["".concat(l,".").concat(g)]||m[g]||h[g]||r;return n?a.createElement(u,s(s({ref:t},p),{},{components:n})):a.createElement(u,s({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},17391:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});n(27378);var a=n(35318);function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const s={id:"GPU \u5b9e\u4f8b\u5316",slug:"/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/gpuinstancing"},o="GPU \u5b9e\u4f8b\u5316",l={unversionedId:"unity/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/GPU \u5b9e\u4f8b\u5316",id:"version-Unity@2022.1/unity/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/GPU \u5b9e\u4f8b\u5316",title:"GPU \u5b9e\u4f8b\u5316",description:"GPU instancing is a draw call optimization method that renders multiple copies of a mesh with the same material in a single draw call. Each copy of the mesh is called an instance. This is useful for drawing things that appear multiple times in a scene, for example, trees or bushes.",source:"@site/versioned_docs/version-Unity@2022.1/unity/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/gpuinstancing.md",sourceDirName:"unity/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing",slug:"/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/gpuinstancing",permalink:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/gpuinstancing",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/docs/unity/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/gpuinstancing.md",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"3/31/2022",frontMatter:{id:"GPU \u5b9e\u4f8b\u5316",slug:"/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/gpuinstancing"},sidebar:"unity",previous:{title:"Static batching",permalink:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/draw-call-batching/static-batching"},next:{title:"Creating shaders that support GPU instancing",permalink:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/gpuinstancing/gpu-instancing-shader"}},c={},p=[{value:"Requirements and compatibility",id:"requirements-and-compatibility",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:3},{value:"Render pipeline compatibility",id:"render-pipeline-compatibility",level:3},{value:"SRP Batcher",id:"srp-batcher",level:3},{value:"Using GPU instancing",id:"using-gpu-instancing",level:2},{value:"Lighting",id:"lighting",level:3},{value:"Performance implications",id:"performance-implications",level:2}],h={toc:p};function m(e){var{components:t}=e,n=r(e,["components"]);return(0,a.kt)("wrapper",i({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",i({},{id:"gpu-\u5b9e\u4f8b\u5316"}),"GPU \u5b9e\u4f8b\u5316"),(0,a.kt)("p",null,"GPU instancing is a ",(0,a.kt)("a",i({parentName:"p"},{href:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/optimizing-draw-calls"}),"draw call optimization")," method that renders multiple copies of a mesh with the same material in a single draw call. Each copy of the mesh is called an instance. This is useful for drawing things that appear multiple times in a scene, for example, trees or bushes."),(0,a.kt)("p",null,"GPU instancing renders identical meshes in the same draw call. To add variation and reduce the appearance of repetition, each instance can have different properties, such as  ",(0,a.kt)("strong",{parentName:"p"},"Color"),"  or  ",(0,a.kt)("strong",{parentName:"p"},"Scale")," . Draw calls that render multiple instances appear in the ",(0,a.kt)("a",i({parentName:"p"},{href:"/en/docs/graphics/graphics-performance-profiling/frame-debugger"}),"Frame Debugger")," as  ",(0,a.kt)("strong",{parentName:"p"},"Draw Mesh (instanced)")," ."),(0,a.kt)("h2",i({},{id:"requirements-and-compatibility"}),"Requirements and compatibility"),(0,a.kt)("p",null,"This section includes information about the platform, render pipeline, and SRP Batcher compatibility of GPU instancing."),(0,a.kt)("h3",i({},{id:"platform-compatibility"}),"Platform compatibility"),(0,a.kt)("p",null,"GPU instancing is available on every platform except WebGL 1.0."),(0,a.kt)("h3",i({},{id:"render-pipeline-compatibility"}),"Render pipeline compatibility"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",i({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"\u529f\u80fd")),(0,a.kt)("th",i({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"\u5185\u7f6e\u6e32\u67d3\u7ba1\u7ebf")),(0,a.kt)("th",i({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"\u901a\u7528\u6e32\u67d3\u7ba1\u7ebf (URP)")),(0,a.kt)("th",i({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"\u9ad8\u6e05\u6e32\u67d3\u7ba1\u7ebf (HDRP)")),(0,a.kt)("th",i({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Custom Scriptable Render Pipeline (SRP)")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"td"},"GPU instancing")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"\u662f"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"\u662f (1)"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"\u662f (1)"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"\u662f (1)")))),(0,a.kt)("p",null," ",(0,a.kt)("strong",{parentName:"p"},"\u6ce8\u610f")," \uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Only if the shader isn\u2019t compatible with the ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/srpbatcher"}),"SRP Batcher"),".")),(0,a.kt)("h3",i({},{id:"srp-batcher"}),"SRP Batcher"),(0,a.kt)("p",null,"GPU instancing isn\u2019t compatible with the ",(0,a.kt)("a",i({parentName:"p"},{href:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/srpbatcher"}),"SRP Batcher"),". The SRP Batcher takes priority over GPU instancing. If a GameObject is compatible with the SRP Batcher, Unity uses the SRP Batcher to render it, not GPU instancing. For more information about optimization method priority, see ",(0,a.kt)("a",i({parentName:"p"},{href:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/optimizing-draw-calls#optimization-priority"}),"Optimization priority"),"."),(0,a.kt)("p",null,"If your project uses the SRP Batcher and you want to use GPU instancing for a GameObject, you can do one of the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("a",i({parentName:"li"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Graphics.DrawMeshInstanced.html"}),"Graphics.DrawMeshInstanced"),". This API bypasses the use of GameObjects and uses the specified parameters to directly draw a mesh on screen."),(0,a.kt)("li",{parentName:"ul"},"Manually remove SRP Batcher compatibility. For information on how to do this, see ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/graphics-performance-profiling/optimizing-draw-calls/srpbatcher#intentionally-removing-srp-batcher-compatibility-for-game-objects"}),"Intentionally removing compatibility"),".")),(0,a.kt)("h2",i({},{id:"using-gpu-instancing"}),"Using GPU instancing"),(0,a.kt)("p",null,"Unity uses GPU instancing for GameObjects that share the same mesh and material. To instance a mesh and material:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The material\u2019s ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/shaders/shaders"}),"shader")," must support GPU instancing. Unity\u2019s ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/shaders/shader-built-in/shader-standard-shader/shader-standard-shader"}),"Standard Shader")," supports GPU instancing, as do all ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/shaders/shader-writing/sl-surface-shaders/sl-surface-shaders"}),"surface shaders"),". To add GPU instancing support to any other shader, see ","[","Creating shaders that support GPU instancing(gpu-instancing-shader)."),(0,a.kt)("li",{parentName:"ul"},"The mesh must be from one of the following sources:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/mesh/comp-mesh-group/class-mesh-renderer"}),"MeshRenderer")," component or a ",(0,a.kt)("a",i({parentName:"li"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Graphics.DrawMesh.html"}),"Graphics.DrawMesh")," call. Unity adds meshes from these sources to a list and attempts to instance them together. If the GameObject that a MeshRenderer component is attached to is SRP Batcher compatible, then Unity can\u2019t instance that mesh. For more information, see ",(0,a.kt)("a",i({parentName:"li"},{href:"#srp-batcher"}),"SRP Batcher compatibility"),". ",(0,a.kt)("br",null)," ",(0,a.kt)("strong",{parentName:"li"},"Note")," : Unity doesn\u2019t support GPU instancing for ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/mesh/comp-mesh-group/class-skinned-mesh-renderer"}),"SkinnedMeshRenderers"),"."),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",i({parentName:"li"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Graphics.DrawMeshInstanced.html"}),"Graphics.DrawMeshInstanced")," or ",(0,a.kt)("a",i({parentName:"li"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Graphics.DrawMeshInstancedIndirect.html"}),"Graphics.DrawMeshInstancedIndirect")," call. These methods instance the same mesh in multiple places using the same shader. Unity executes each call separately which means it can\u2019t instance meshes from different calls together.")))),(0,a.kt)("p",null,"To use GPU instancing for a material, select the  ",(0,a.kt)("strong",{parentName:"p"},"Enable GPU Instancing"),"  option in the Inspector."),(0,a.kt)("p",null,(0,a.kt)("img",i({parentName:"p"},{src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/enable-gpu-instancing-inspector.png",alt:"The Enable GPU Instancing option as it appears in the material Inspector."}))),(0,a.kt)("p",null,"The Enable GPU Instancing option as it appears in the material Inspector."),(0,a.kt)("h3",i({},{id:"lighting"}),"Lighting"),(0,a.kt)("p",null,"GPU instancing supports Unity\u2019s ",(0,a.kt)("a",i({parentName:"p"},{href:"/en/docs/graphics/lighting-overview/lightmappers/gi-enlighten"}),"Baked Global Illumination system"),". Unity Standard Shaders and surface shaders support GPU instancing and Unity\u2019s Baked Global Illumination system by default."),(0,a.kt)("p",null,"Each GPU instance supports global illumination from one of the following sources:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Any number of ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/lighting-overview/light-probes/light-probes"}),"Light Probes"),"."),(0,a.kt)("li",{parentName:"ul"},"One ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/lighting-overview/lightmappers/lightmapping"}),"lightmap"),". ",(0,a.kt)("br",null)," ",(0,a.kt)("strong",{parentName:"li"},"Note")," : An instance can use multiple atlas regions in the lightmap."),(0,a.kt)("li",{parentName:"ul"},"One ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/lighting-overview/light-probes/class-light-probe-proxy-volume"}),"Light Probe Proxy Volume"),"(LPPV) component. ",(0,a.kt)("br",null)," ",(0,a.kt)("strong",{parentName:"li"},"Note")," : You must bake the LPPV for the space volume that contains all the instances.")),(0,a.kt)("p",null,"GPU instancing automatically works with:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Dynamic ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/graphics/mesh/comp-mesh-group/class-mesh-renderer"}),"Mesh Renderers")," affected by Light Probes."),(0,a.kt)("li",{parentName:"ul"},"Static Mesh Renderers you bake to the same lightmap texture. A Mesh Renderer is static in this context if it includes  ",(0,a.kt)("strong",{parentName:"li"},"Contribute GI"),"  in its ",(0,a.kt)("a",i({parentName:"li"},{href:"/en/docs/unity-overview/creating-gameplay/game-objects/static-objects"}),"Static Editor Flags"),".")),(0,a.kt)("p",null,"To enable Light Probe rendering for ",(0,a.kt)("inlineCode",{parentName:"p"},"Graphics.DrawMeshInstanced"),", set the ",(0,a.kt)("a",i({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rendering.LightProbeUsage.html"}),"LightProbeUsage")," parameter to ",(0,a.kt)("a",i({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rendering.LightProbeUsage.CustomProvided.html"}),"CustomProvided")," and provide a ",(0,a.kt)("a",i({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/MaterialPropertyBlock.html"}),"MaterialPropertyBlock")," that includes the Probe data. For more information and code examples, see ",(0,a.kt)("a",i({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/LightProbes.CalculateInterpolatedLightAndOcclusionProbes.html"}),"LightProbes.CalculateInterpolatedLightAndOcclusionProbes"),"."),(0,a.kt)("p",null,"Alternatively, you can pass an LPPV component reference and ",(0,a.kt)("a",i({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Rendering.LightProbeUsage.UseProxyVolume.html"}),"LightProbeUsage.UseProxyVolume")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"Graphics.DrawMeshInstanced"),". When you do this, all instances sample the volume for the ",(0,a.kt)("a",i({parentName:"p"},{href:"/en/docs/graphics/lighting-overview/light-probes/light-probes-technical-information"}),"L0 and L1 bands")," of the Light Probe data. If you want to supplement L2 data and occlusion data, use a ",(0,a.kt)("inlineCode",{parentName:"p"},"MaterialPropertyBlock"),". For more information, see ",(0,a.kt)("a",i({parentName:"p"},{href:"/en/docs/graphics/lighting-overview/light-probes/light-probes-technical-information"}),"Light Probes: Technical Information"),"."),(0,a.kt)("h2",i({},{id:"performance-implications"}),"Performance implications"),(0,a.kt)("p",null,"Meshes that have a low number of vertices can\u2019t be processed efficiently using GPU instancing because the GPU can\u2019t distribute the work in a way that fully uses the GPU\u2019s resources. This processing inefficiency can have a detrimental effect on performance. The threshold at which inefficiencies begin depends on the GPU, but as a general rule, don\u2019t use GPU instancing for meshes that have fewer than 256 vertices."),(0,a.kt)("p",null,"If you want to render a mesh with a low number of vertices many times, best practice is to create a single buffer that contains all the mesh information and use that to draw the meshes."),(0,a.kt)("hr",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"2017\u201310\u201324 \u9875\u9762\u5df2\u4fee\u8ba2"),(0,a.kt)("li",{parentName:"ul"},"\u5728 5.6 \u7248\u4e2d\u589e\u52a0\u4e86 Enable Instancing \u590d\u9009\u6846\u6307\u5357\u3001DrawMeshInstancedIndirect \u548c #pragma multi-compile"),(0,a.kt)("li",{parentName:"ul"},"\u5728 ",(0,a.kt)("a",i({parentName:"li"},{href:"https://docs.unity3d.com/2017.3/Documentation/Manual/30_search.html?q=newin20173"}),"2017.3")," \u7248\u4e2d\u589e\u52a0\u4e86\u9488\u5bf9 GPU \u5b9e\u4f8b\u5316\u7684\u7740\u8272\u5668\u9884\u70ed NewIn20173"),(0,a.kt)("li",{parentName:"ul"},"\u5728 ",(0,a.kt)("a",i({parentName:"li"},{href:"https://docs.unity3d.com/2018.1/Documentation/Manual/30_search.html?q=newin20181"}),"2018.1")," \u7248\u4e2d\u589e\u52a0\u4e86 GPU \u5b9e\u4f8b\u5316\u7684\u5168\u5c40\u5149\u7167 (GI) \u652f\u6301 NewIn20181")))}m.isMDXComponent=!0}}]);