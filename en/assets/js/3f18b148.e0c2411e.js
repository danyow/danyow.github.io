"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[64157],{35318:function(t,e,r){r.d(e,{Zo:function(){return m},kt:function(){return d}});var n=r(27378);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function p(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var o=n.createContext({}),u=function(t){var e=n.useContext(o),r=e;return t&&(r="function"==typeof t?t(e):p(p({},e),t)),r},m=function(t){var e=u(t.components);return n.createElement(o.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,o=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),c=u(r),d=a,f=c["".concat(o,".").concat(d)]||c[d]||l[d]||i;return r?n.createElement(f,p(p({ref:e},m),{},{components:r})):n.createElement(f,p({ref:e},m))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,p=new Array(i);p[0]=c;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s.mdxType="string"==typeof t?t:a,p[1]=s;for(var u=2;u<i;u++)p[u]=r[u];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},34171:function(t,e,r){r.r(e),r.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return m}});r(27378);var n=r(35318);function a(){return a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},a.apply(this,arguments)}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}const p={id:"Mipmaps",slug:"/graphics/textures/texture-mipmaps/texture-mipmaps"},s="Mipmaps",o={unversionedId:"unity/graphics/textures/texture-mipmaps/Mipmaps",id:"version-Unity@2022.1/unity/graphics/textures/texture-mipmaps/Mipmaps",title:"Mipmaps",description:"A mip or mip level is a version of a texture with a specific resolution. Mips exist in sets called mipmaps. Mipmaps can speed up rendering operations and reduce rendering artifacts in situations where the GPU renders a texture at less than its full resolution.",source:"@site/versioned_docs/version-Unity@2022.1/unity/graphics/textures/texture-mipmaps/texture-mipmaps.md",sourceDirName:"unity/graphics/textures/texture-mipmaps",slug:"/graphics/textures/texture-mipmaps/texture-mipmaps",permalink:"/en/docs/graphics/textures/texture-mipmaps/texture-mipmaps",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/docs/unity/graphics/textures/texture-mipmaps/texture-mipmaps.md",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"3/31/2022",frontMatter:{id:"Mipmaps",slug:"/graphics/textures/texture-mipmaps/texture-mipmaps"},sidebar:"unity",previous:{title:"Recommended, default, and supported texture formats, by platform",permalink:"/en/docs/graphics/textures/texture-compression-formats/class-texture-importer-override"},next:{title:"Streaming Controller component",permalink:"/en/docs/graphics/textures/texture-mipmaps/class-streaming-controller"}},u={},m=[],l={toc:m};function c(t){var{components:e}=t,r=i(t,["components"]);return(0,n.kt)("wrapper",a({},l,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",a({},{id:"mipmaps"}),"Mipmaps"),(0,n.kt)("p",null,"A mip or mip level is a version of a texture with a specific resolution. Mips exist in sets called mipmaps. Mipmaps can speed up rendering operations and reduce rendering artifacts in situations where the GPU renders a texture at less than its full resolution."),(0,n.kt)("p",null,"\u672c\u8282\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\uff1a"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",a({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"\u9875\u9762")),(0,n.kt)("th",a({parentName:"tr"},{align:null}),(0,n.kt)("strong",{parentName:"th"},"\u63cf\u8ff0")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",a({parentName:"tr"},{align:null}),(0,n.kt)("a",a({parentName:"td"},{href:"/en/docs/graphics/textures/texture-mipmaps/texture-mipmaps-introduction"}),"Mipmaps introduction")),(0,n.kt)("td",a({parentName:"tr"},{align:null}),"An introduction to mips and mipmaps in Unity.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",a({parentName:"tr"},{align:null}),(0,n.kt)("a",a({parentName:"td"},{href:"/en/docs/graphics/textures/texture-mipmaps/texture-streaming"}),"The Mipmpap Streaming system")),(0,n.kt)("td",a({parentName:"tr"},{align:null}),"Information about a feature that lets you control how Unity loads mips.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",a({parentName:"tr"},{align:null}),(0,n.kt)("a",a({parentName:"td"},{href:"/en/docs/graphics/textures/texture-mipmaps/texture-streaming-api"}),"The Mipmpap Streaming system API")),(0,n.kt)("td",a({parentName:"tr"},{align:null}),"How to use C# scripts to extend the basic functionality of the Mipmap Streaming system.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",a({parentName:"tr"},{align:null}),(0,n.kt)("a",a({parentName:"td"},{href:"/en/docs/graphics/textures/texture-mipmaps/class-streaming-controller"}),"Streaming Controller component")),(0,n.kt)("td",a({parentName:"tr"},{align:null}),"Information about this component, which is part of the Mipmap Streaming system.")))))}c.isMDXComponent=!0}}]);