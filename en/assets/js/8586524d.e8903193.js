"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[21739],{35318:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return n?i.createElement(g,u(u({ref:t},d),{},{components:n})):i.createElement(g,u({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,u=new Array(o);u[0]=c;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,u[1]=a;for(var l=2;l<o;l++)u[l]=n[l];return i.createElement.apply(null,u)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},34489:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return c},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return d}});n(27378);var i=n(35318);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},r.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const u={id:"Testing inside the UI Builder",slug:"/uitoolkits/uielements/uibuilder/uib-testing-ui/uib-testing-ui-testing-inside"},a="Testing inside the UI Builder",s={unversionedId:"unity/uitoolkits/uielements/uibuilder/uib-testing-ui/Testing inside the UI Builder",id:"version-Unity@2022.1/unity/uitoolkits/uielements/uibuilder/uib-testing-ui/Testing inside the UI Builder",title:"Testing inside the UI Builder",description:"To test your UI inside the UI Builder, directly inside the  Canvas , you can enable  Preview  mode, found in the  Viewport \u2019s toolbar.  Preview  mode removes the UI Builder-specific picking overlay and handles from the  Canvas . You can tell if you have  Preview  mode enabled by looking for a orange border around the entire  Viewport :",source:"@site/versioned_docs/version-Unity@2022.1/unity/uitoolkits/uielements/uibuilder/uib-testing-ui/uib-testing-ui-testing-inside.md",sourceDirName:"unity/uitoolkits/uielements/uibuilder/uib-testing-ui",slug:"/uitoolkits/uielements/uibuilder/uib-testing-ui/uib-testing-ui-testing-inside",permalink:"/en/docs/uitoolkits/uielements/uibuilder/uib-testing-ui/uib-testing-ui-testing-inside",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/docs/unity/uitoolkits/uielements/uibuilder/uib-testing-ui/uib-testing-ui-testing-inside.md",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"3/31/2022",frontMatter:{id:"Testing inside the UI Builder",slug:"/uitoolkits/uielements/uibuilder/uib-testing-ui/uib-testing-ui-testing-inside"},sidebar:"unity",previous:{title:"Debug styles",permalink:"/en/docs/uitoolkits/uielements/uibuilder/uib-testing-ui/uib-testing-ui-debugging-styles"},next:{title:"\u7ed1\u5b9a",permalink:"/en/docs/uitoolkits/uielements/uie-binding"}},l={},d=[],p={toc:d};function c(e){var{components:t}=e,n=o(e,["components"]);return(0,i.kt)("wrapper",r({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",r({},{id:"testing-inside-the-ui-builder"}),"Testing inside the UI Builder"),(0,i.kt)("p",null,"To test your UI inside the UI Builder, directly inside the  ",(0,i.kt)("strong",{parentName:"p"},"Canvas")," , you can enable  ",(0,i.kt)("strong",{parentName:"p"},"Preview"),"  mode, found in the  ",(0,i.kt)("strong",{parentName:"p"},"Viewport")," \u2019s toolbar.  ",(0,i.kt)("strong",{parentName:"p"},"Preview"),"  mode removes the UI Builder-specific picking overlay and handles from the  ",(0,i.kt)("strong",{parentName:"p"},"Canvas")," . You can tell if you have  ",(0,i.kt)("strong",{parentName:"p"},"Preview"),"  mode enabled by looking for a orange border around the entire  ",(0,i.kt)("strong",{parentName:"p"},"Viewport")," :"),(0,i.kt)("p",null,(0,i.kt)("img",r({parentName:"p"},{src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/UIBuilder/PreviewMode.png",alt:"PreviewMode"}))),(0,i.kt)("p",null,"PreviewMode"),(0,i.kt)("p",null,"With  ",(0,i.kt)("strong",{parentName:"p"},"Preview"),"  mode enabled, the elements of your UI Document (UXML) in the  ",(0,i.kt)("strong",{parentName:"p"},"Canvas"),"  will start receiving input events, letting you test:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"State-based controls like ",(0,i.kt)("inlineCode",{parentName:"li"},"Foldout"),", which you can click on to expand and see how the reset of the UI reacts."),(0,i.kt)("li",{parentName:"ul"},"Input fields like ",(0,i.kt)("inlineCode",{parentName:"li"},"IntegerField"),", where you can test input validation."),(0,i.kt)("li",{parentName:"ul"},"Large containers like ",(0,i.kt)("inlineCode",{parentName:"li"},"ScrollView"),", where you can test scrolling up and down."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},":hover")," pseudo states to check hover-only styles.")),(0,i.kt)("p",null,"While in  ",(0,i.kt)("strong",{parentName:"p"},"Preview"),"  mode, you can still continue to modify your UI Document (UXML) and StyleSheets using the  ",(0,i.kt)("strong",{parentName:"p"},"StyleSheets"),"  pane, the  ",(0,i.kt)("strong",{parentName:"p"},"Hierarchy"),"  pane, and the  ",(0,i.kt)("strong",{parentName:"p"},"Inspector")," .  ",(0,i.kt)("strong",{parentName:"p"},"Canvas"),"  picking and manipulators are turned off in  ",(0,i.kt)("strong",{parentName:"p"},"Preview"),"  mode."))}c.isMDXComponent=!0}}]);