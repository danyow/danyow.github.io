"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[54893],{35318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?i.createElement(f,l(l({ref:t},u),{},{components:n})):i.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},36960:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});n(27378);var i=n(35318);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},r.apply(this,arguments)}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={id:"Incremental build pipeline",slug:"/unity-overview/editor-features/incremental-build-pipeline"},o="Incremental build pipeline",s={unversionedId:"unity/unity-overview/editor-features/Incremental build pipeline",id:"version-Unity@2022.1/unity/unity-overview/editor-features/Incremental build pipeline",title:"Incremental build pipeline",description:"For faster iteration during development, Unity uses an incremental build pipeline that only rebuilds parts of the application if they have changed since the previous build. This includes build steps such as asset serialization, code compilation, data compression, and signing. By default, Unity uses the incremental builds pipeline for both release and development builds.",source:"@site/versioned_docs/version-Unity@2022.1/unity/unity-overview/editor-features/incremental-build-pipeline.md",sourceDirName:"unity/unity-overview/editor-features",slug:"/unity-overview/editor-features/incremental-build-pipeline",permalink:"/en/docs/unity-overview/editor-features/incremental-build-pipeline",editUrl:"https://github.com/danyow/danyow.github.io/edit/main/docs/unity/unity-overview/editor-features/incremental-build-pipeline.md",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"3/31/2022",frontMatter:{id:"Incremental build pipeline",slug:"/unity-overview/editor-features/incremental-build-pipeline"},sidebar:"unity",previous:{title:"Unity \u4e2d\u7684 IME",permalink:"/en/docs/unity-overview/editor-features/imeinput"},next:{title:"Plastic SCM plugin for Unity",permalink:"/en/docs/unity-overview/editor-features/plastic-scmplugin/plastic-scmplugin"}},c={},u=[{value:"Platform compatibility",id:"platform-compatibility",level:2},{value:"Creating non-incremental builds",id:"creating-non-incremental-builds",level:2}],p={toc:u};function d(e){var{components:t}=e,n=a(e,["components"]);return(0,i.kt)("wrapper",r({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",r({},{id:"incremental-build-pipeline"}),"Incremental build pipeline"),(0,i.kt)("p",null,"For faster iteration during development, Unity uses an incremental build pipeline that only rebuilds parts of the application if they have changed since the previous build. This includes build steps such as asset serialization, code compilation, data compression, and signing. By default, Unity uses the incremental builds pipeline for both release and development builds."),(0,i.kt)("p",null,"The incremental build pipeline also automates the ",(0,i.kt)("a",r({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/BuildOptions.BuildScriptsOnly.html"}),"Scripts Only Build")," feature.  ",(0,i.kt)("strong",{parentName:"p"},"Scripts Only Build"),"  is therefore only available in the Build Settings window for the platforms that do not use incremental builds."),(0,i.kt)("p",null,"The incremental build pipeline works for both the Mono and IL2CPP ",(0,i.kt)("a",r({parentName:"p"},{href:"/en/docs/scripting-section/unity-architecture/scripting-backends/scripting-backends"}),"scripting backend"),". Although, the output file structure changes depending on which scripting backend your project uses."),(0,i.kt)("h2",r({},{id:"platform-compatibility"}),"Platform compatibility"),(0,i.kt)("p",null,"Unity supports the incremental build pipeline for the following platforms:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Standalone (Windows, Mac and Linux)"),(0,i.kt)("li",{parentName:"ul"},"WebGL"),(0,i.kt)("li",{parentName:"ul"},"Xbox One"),(0,i.kt)("li",{parentName:"ul"},"Xbox Series X and Xbox Series S"),(0,i.kt)("li",{parentName:"ul"},"Android"),(0,i.kt)("li",{parentName:"ul"},"iOS"),(0,i.kt)("li",{parentName:"ul"},"tvOS")),(0,i.kt)("h2",r({},{id:"creating-non-incremental-builds"}),"Creating non-incremental builds"),(0,i.kt)("p",null,"In some scenarios, it can be useful or necessary to create builds that don\u2019t use the incremental build pipeline."),(0,i.kt)("p",null,"To create a clean, non-incremental, build:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open the ",(0,i.kt)("a",r({parentName:"li"},{href:"/en/docs/unity-overview/editor-features/build-settings"}),"Build Settings")," window."),(0,i.kt)("li",{parentName:"ol"},"Next to the  ",(0,i.kt)("strong",{parentName:"li"},"Build"),"  button, select the drop-down."),(0,i.kt)("li",{parentName:"ol"},"Select  ",(0,i.kt)("strong",{parentName:"li"},"Clean Build")," .")),(0,i.kt)("p",null,"In general, if expected changes are not present after an incremental build and you think there is a problem with the incremental build pipeline, create a clean build. The most common reason for this is when you implement or make changes to build process callbacks that affect assets."),(0,i.kt)("p",null,"Since the build process can\u2019t know how a callback you\u2019ve implemented affects an asset, it can\u2019t determine how to rebuild the asset. Unity only regenerates files if the file\u2019s dependencies change. This means if the callback modifies a file that Unity generates, and the file\u2019s dependencies don\u2019t change, the callback can apply modifications to an already modified file. For example, if the callback adds new entries to an ",(0,i.kt)("a",r({parentName:"p"},{href:"/en/docs/platform-specific/android/android-introducing/android-manifest"}),"Android App Manifest"),", and the dependencies for the Android App Manifest don\u2019t change, the callback still adds the new entries, which results in an invalid file."),(0,i.kt)("p",null,"If you change a callback or its input data and you want Unity to rebuild assets that the callback affects, create a clean build. Examples of callbacks include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",r({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Callbacks.PostProcessSceneAttribute.html"}),"PostProcessSceneAttribute"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",r({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Build.IPreprocessShaders.OnProcessShader.html"}),"IPreprocessShaders.OnProcessShader"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",r({parentName:"p"},{href:"https://docs.unity3d.com/cn/2022.1/ScriptReference/Build.IPreprocessComputeShaders.OnProcessComputeShader.html"}),"IPreprocessComputeShaders.OnProcessComputeShader")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Note")," : If you make changes to an asset, Unity rebuilds that asset when it builds the application. This also includes processing any callback that affects it which means you don\u2019t need to create a clean build if you make changes to an asset, only if you make changes to a build process callback."))))}d.isMDXComponent=!0}}]);