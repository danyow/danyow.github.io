"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[94232],{35318:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(27378);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),o=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=o(e.components);return n.createElement(i.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=o(t),d=a,h=c["".concat(i,".").concat(d)]||c[d]||m[d]||s;return t?n.createElement(h,l(l({ref:r},u),{},{components:t})):n.createElement(h,l({ref:r},u))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=c;var p={};for(var i in r)hasOwnProperty.call(r,i)&&(p[i]=r[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var o=2;o<s;o++)l[o]=t[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},64580:function(e,r,t){t.r(r),t.d(r,{assets:function(){return o},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});t(27378);var n=t(35318);function a(){return a=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},a.apply(this,arguments)}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const l={id:"\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001",slug:"/graphics/shaders/shader-writing/sl-shader-programs/sl-sampler-states"},p="\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001",i={unversionedId:"unity/graphics/shaders/shader-writing/sl-shader-programs/\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001",id:"version-Unity@2022.1/unity/graphics/shaders/shader-writing/sl-shader-programs/\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001",title:"\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001",description:"\u8026\u5408\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668",source:"@site/versioned_docs/version-Unity@2022.1/unity/graphics/shaders/shader-writing/sl-shader-programs/sl-sampler-states.md",sourceDirName:"unity/graphics/shaders/shader-writing/sl-shader-programs",slug:"/graphics/shaders/shader-writing/sl-shader-programs/sl-sampler-states",permalink:"/docs/graphics/shaders/shader-writing/sl-shader-programs/sl-sampler-states",editUrl:"https://crowdin.com/project/docusaurus-v2/zh-Hans",tags:[],version:"Unity@2022.1",lastUpdatedBy:"danyow",lastUpdatedAt:1648742180,formattedLastUpdatedAt:"2022/3/31",frontMatter:{id:"\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001",slug:"/graphics/shaders/shader-writing/sl-shader-programs/sl-sampler-states"},sidebar:"unity",previous:{title:"\u4f7f\u7528 Cg/HLSL \u8bbf\u95ee\u7740\u8272\u5668\u5c5e\u6027",permalink:"/docs/graphics/shaders/shader-writing/sl-shader-programs/sl-properties-in-programs"},next:{title:"\u7740\u8272\u5668\u8bed\u4e49",permalink:"/docs/graphics/shaders/shader-writing/sl-shader-programs/sl-shader-semantics"}},o={},u=[{value:"\u8026\u5408\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668",id:"\u8026\u5408\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668",level:2},{value:"\u5355\u72ec\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668",id:"\u5355\u72ec\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668",level:2},{value:"\u5185\u8054\u91c7\u6837\u5668\u72b6\u6001",id:"\u5185\u8054\u91c7\u6837\u5668\u72b6\u6001",level:2}],m={toc:u};function c(e){var{components:r}=e,t=s(e,["components"]);return(0,n.kt)("wrapper",a({},m,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",a({},{id:"\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001"}),"\u4f7f\u7528\u91c7\u6837\u5668\u72b6\u6001"),(0,n.kt)("h2",a({},{id:"\u8026\u5408\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668"}),"\u8026\u5408\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668"),(0,n.kt)("p",null,"Most of the time when sampling textures in shaders, the texture sampling state should come from ",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/graphics/textures/importing-textures/class-texture-importer/class-texture-importer"}),"texture settings")," \u2013 essentially, textures and samplers are coupled together. This is default behavior when using DX9-style shader syntax:"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{}),"sampler2D _MainTex;\n// ...\nhalf4 color = tex2D(_MainTex, uv);\n")),(0,n.kt)("p",null,"\u4f7f\u7528 HLSL \u5173\u952e\u5b57 sampler2D\u3001sampler3D \u548c samplerCUBE \u53ef\u58f0\u660e\u7eb9\u7406\u548c\u91c7\u6837\u5668\u3002"),(0,n.kt)("p",null,"\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u60a8\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u800c\u4e14\u5728\u8f83\u65e7\u7684\u56fe\u5f62 API (OpenGL ES) \u4e2d\uff0c\u8fd9\u662f\u552f\u4e00\u53d7\u652f\u6301\u7684\u9009\u9879\u3002"),(0,n.kt)("h2",a({},{id:"\u5355\u72ec\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668"}),"\u5355\u72ec\u7684\u7eb9\u7406\u548c\u91c7\u6837\u5668"),(0,n.kt)("p",null,"Many graphics APIs and GPUs allow using fewer samplers than textures, and coupled texture+sampler syntax might not allow more complex shaders to be written. For example, Direct3D 11 allows using up to 128 textures in a single shader, but only up to 16 samplers."),(0,n.kt)("p",null,"Unity \u5141\u8bb8\u4f7f\u7528 DX11 \u98ce\u683c\u7684 HLSL \u8bed\u6cd5\u6765\u58f0\u660e\u7eb9\u7406\u548c\u91c7\u6837\u5668\uff0c\u4f46\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u7684\u547d\u540d\u7ea6\u5b9a\u6765\u8ba9\u5b83\u4eec\u5339\u914d\uff1a\u540d\u79f0\u4e3a\u201csampler\u201d+TextureName \u683c\u5f0f\u7684\u91c7\u6837\u5668\u5c06\u4ece\u8be5\u7eb9\u7406\u4e2d\u83b7\u53d6\u91c7\u6837\u72b6\u6001\u3002"),(0,n.kt)("p",null,"\u4ee5\u4e0a\u90e8\u5206\u4e2d\u7684\u7740\u8272\u5668\u4ee3\u7801\u7247\u6bb5\u53ef\u4ee5\u7528 DX11 \u98ce\u683c\u7684 HLSL \u8bed\u6cd5\u91cd\u5199\uff0c\u5e76\u4e14\u4e5f\u4f1a\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{}),'Texture2D _MainTex;\nSamplerState sampler_MainTex; //"sampler"+"_MainTex"\n// ...\nhalf4 color = _MainTex.Sample(sampler_MainTex, uv);\n')),(0,n.kt)("p",null,"However, this way, a shader could be written to \u201creuse\u201d samplers from other textures, while sampling more than one texture. In the example below, three textures are sampled, but only one sampler is used for all of them:"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{}),'Texture2D _MainTex;\nTexture2D _SecondTex;\nTexture2D _ThirdTex;\nSamplerState sampler_MainTex; //"sampler"+"_MainTex"\n// ...\nhalf4 color = _MainTex.Sample(sampler_MainTex, uv);\ncolor += _SecondTex.Sample(sampler_MainTex, uv);\ncolor += _ThirdTex.Sample(sampler_MainTex, uv);\n')),(0,n.kt)("p",null,"\u4f46\u662f\u8bf7\u6ce8\u610f\uff0cDX11 \u98ce\u683c\u7684 HLSL \u8bed\u6cd5\u5728\u67d0\u4e9b\u8f83\u65e7\u7684\u5e73\u53f0\uff08\u4f8b\u5982\uff0cOpenGL ES 2.0\uff09\u4e0a\u65e0\u6548\uff0c\u8bf7\u53c2\u9605",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/graphics/shaders/shader-writing/sl-shader-programs/sl-shader-programs"}),"\u5728 Unity \u4e2d\u4f7f\u7528 HLSL")," \u4ee5\u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\u3002\u60a8\u53ef\u80fd\u9700\u8981\u6307\u5b9a ",(0,n.kt)("inlineCode",{parentName:"p"},"#pragma target 3.5"),"\uff08\u8bf7\u53c2\u9605",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/graphics/shaders/shader-writing/sl-shader-programs/shader-preprocessor-directives/sl-shader-compile-targets"}),"\u7740\u8272\u5668\u7f16\u8bd1\u76ee\u6807"),"\uff09\u4ee5\u907f\u514d\u8f83\u65e7\u7684\u5e73\u53f0\u4f7f\u7528\u7740\u8272\u5668\u3002"),(0,n.kt)("p",null,"Unity \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7740\u8272\u5668\u5b8f\u5e2e\u52a9\u60a8\u4f7f\u7528\u8fd9\u79cd\u201c\u5355\u72ec\u91c7\u6837\u5668\u201d\u65b9\u6cd5\u6765\u58f0\u660e\u548c\u91c7\u6837\u7eb9\u7406\uff0c\u8bf7\u53c2\u9605",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/graphics/shaders/shader-writing/sl-shader-programs/sl-builtin-macros"}),"\u5185\u7f6e\u5b8f"),"\u3002\u4ee5\u4e0a\u793a\u4f8b\u53ef\u4ee5\u91c7\u7528\u6240\u8ff0\u7684\u5b8f\u91cd\u5199\u4e3a\u4e0b\u5217\u5f62\u5f0f\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{}),"UNITY_DECLARE_TEX2D(_MainTex);\nUNITY_DECLARE_TEX2D_NOSAMPLER(_SecondTex);\nUNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdTex);\n// ...\nhalf4 color = UNITY_SAMPLE_TEX2D(_MainTex, uv);\ncolor += UNITY_SAMPLE_TEX2D_SAMPLER(_SecondTex, _MainTex, uv);\ncolor += UNITY_SAMPLE_TEX2D_SAMPLER(_ThirdTex, _MainTex, uv);\n")),(0,n.kt)("p",null,"\u4ee5\u4e0a\u4ee3\u7801\u5c06\u5728 Unity \u652f\u6301\u7684\u6240\u6709\u5e73\u53f0\u4e0a\u8fdb\u884c\u7f16\u8bd1\uff0c\u4f46\u4f1a\u5728 DX9 \u7b49\u65e7\u5e73\u53f0\u4e0a\u56de\u9000\u5230\u4f7f\u7528\u4e09\u4e2a\u91c7\u6837\u5668\u3002"),(0,n.kt)("h2",a({},{id:"\u5185\u8054\u91c7\u6837\u5668\u72b6\u6001"}),"\u5185\u8054\u91c7\u6837\u5668\u72b6\u6001"),(0,n.kt)("p",null,"\u9664\u4e86\u80fd\u8bc6\u522b\u540d\u4e3a\u201csampler\u201d+TextureName \u7684 HLSL SamplerState \u5bf9\u8c61\uff0cUnity \u8fd8\u80fd\u8bc6\u522b\u91c7\u6837\u5668\u540d\u79f0\u4e2d\u7684\u67d0\u4e9b\u5176\u4ed6\u6a21\u5f0f\u3002\u8fd9\u5bf9\u4e8e\u76f4\u63a5\u5728\u7740\u8272\u5668\u4e2d\u58f0\u660e\u7b80\u5355\u786c\u7f16\u7801\u91c7\u6837\u72b6\u6001\u5f88\u6709\u7528\u3002\u4f8b\u5982\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{}),"Texture2D _MainTex;\nSamplerState my_point_clamp_sampler;\n// ...\nhalf4 color = _MainTex.Sample(my_point_clamp_sampler, uv);\n")),(0,n.kt)("p",null,"\u540d\u79f0 \u201cmy","_","point","_","clamp","_","sampler\u201d\u5c06\u88ab\u8bc6\u522b\u4e3a\u5e94\u8be5\u4f7f\u7528\u70b9\uff08\u8ddd\u79bb\u6700\u8fd1\uff09\u7eb9\u7406\u8fc7\u6ee4\u548c\u94b3\u5236\u7eb9\u7406\u5305\u88f9\u6a21\u5f0f\u7684\u91c7\u6837\u5668\u3002"),(0,n.kt)("p",null,"\u91c7\u6837\u5668\u540d\u79f0\u88ab\u8bc6\u522b\u4e3a\u201c\u5185\u8054\u201d\u91c7\u6837\u5668\u72b6\u6001\uff08\u5168\u90fd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\uff1a"),(0,n.kt)("p",null,"*","\u201cPoint\u201d\u3001\u201cLinear\u201d\u6216\u201cTrilinear\u201d\uff08\u5fc5\u9700\uff09\u8bbe\u7f6e\u7eb9\u7406\u8fc7\u6ee4\u6a21\u5f0f\u3002"),(0,n.kt)("p",null,"*","\u201cClamp\u201d\u3001\u201cRepeat\u201d\u3001\u201cMirror\u201d\u6216\u201cMirrorOnce\u201d\uff08\u5fc5\u9700\uff09\u8bbe\u7f6e\u7eb9\u7406\u5305\u88f9\u6a21\u5f0f\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{}),'* \u53ef\u6839\u636e\u6bcf\u4e2a\u8f74 (UVW) \u6765\u6307\u5b9a\u5305\u88f9\u6a21\u5f0f\uff0c\u4f8b\u5982"ClampU_RepeatV"\u3002\n')),(0,n.kt)("p",null,"*","\u201cCompare\u201d\uff08\u53ef\u9009\uff09\u8bbe\u7f6e\u7528\u4e8e\u6df1\u5ea6\u6bd4\u8f83\u7684\u91c7\u6837\u5668\uff1b\u4e0e HLSL SamplerComparisonState \u7c7b\u578b\u548c SampleCmp/SampleCmpLevelZero \u51fd\u6570\u914d\u5408\u4f7f\u7528\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u201cAnisoX\u201d (where X can be 2/4/8 or 16, for example, ",(0,n.kt)("inlineCode",{parentName:"li"},"Ansio8"),") can be added to request anisotropic filtering.")),(0,n.kt)("p",null,"\u4ee5\u4e0b\u662f\u5206\u522b\u4f7f\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"sampler_linear_repeat")," \u548c ",(0,n.kt)("inlineCode",{parentName:"p"},"sampler_point_repeat")," \u91c7\u6837\u5668\u72b6\u6001\u8fdb\u884c\u7eb9\u7406\u91c7\u6837\u7684\u793a\u4f8b\uff0c\u8bf4\u660e\u4e86\u5982\u4f55\u901a\u8fc7\u540d\u79f0\u63a7\u5236\u8fc7\u6ee4\u6a21\u5f0f\uff1a"),(0,n.kt)("p",null,(0,n.kt)("img",a({parentName:"p"},{src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SamplerStates1.jpg",alt:"SamplerStates1.jpg"}))),(0,n.kt)("p",null,"Here\u2019s an example with ",(0,n.kt)("inlineCode",{parentName:"p"},"SmpClampPoint"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"SmpRepeatPoint"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"SmpMirrorPoint"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"SmpMirrorOncePoint"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Smp_ClampU_RepeatV_Point")," SamplerStates respectively, illustrating how the name controls wrapping mode. In the last example, different wrap modes are set for horizontal (U) and vertical (V) axes. In all cases, texture coordinates go from \u20132.0 to +2.0."),(0,n.kt)("p",null,(0,n.kt)("img",a({parentName:"p"},{src:"https://docs.unity3d.com/cn/2022.1/uploads/Main/SamplerStates2.png",alt:"SamplerStates2.png"}))),(0,n.kt)("p",null,"Just like separate texture + sampler syntax, inline sampler states are not supported on some platforms. Currently they are implemented on Direct3D 11/12 and Metal."),(0,n.kt)("p",null,"Note that \u201cMirrorOnce\u201d texture wrapping mode is not supported on most mobile GPUs/APIs, and will fallback to Mirror mode when support is not present."),(0,n.kt)("p",null,"Note that the \u201cAnisoX\u201d filtering modes are a best effort based on the platform capabilities and selected API. The actual value will be clamped based on the maximum supported anisotropic level (including disabled in cases where no anisotropic filtering is supported). ",(0,n.kt)("br",null)," ",(0,n.kt)("br",null)),(0,n.kt)("hr",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"2017\u201306\u201301 \u9875\u9762\u5df2\u53d1\u5e03"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",a({parentName:"li"},{href:"https://docs.unity3d.com/2017.1/Documentation/Manual/30_search.html?q=newin20171"}),"2017.1")," \u4e2d\u7684\u65b0\u529f\u80fd NewIn20171")))}c.isMDXComponent=!0}}]);